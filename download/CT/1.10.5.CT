<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <CheatEntries>
    <CheatEntry>
      <ID>7350</ID>
      <Description>"[X]  v1.10.4 工具"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>7351</ID>
          <Description>"除控制台、成就和升级作弊外，所有作弊都需要Recifense的脚本"</Description>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>7352</ID>
          <Description>"-- ! --如果使用mods--，在主菜单前激活moded成就（游戏启动期间）！--"</Description>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>7353</ID>
          <Description>"[十] &lt;==在铁人模式中启用控制台/开发人员模式"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
    Console hack updated to 1.9.1 by CompactDisc
    Thanks to BringChaos for coming up with the console hack.
    Thanks to Xyarican and Schwarz Kruppzo for updating the hack over time.
	Updated to 1.10.4 by Nameless, with heavy lifting done by Xyarican
}

//=========================================
// Definitions
//=========================================
{
define(CHP1,"hoi4.exe"+0060D5E1) //1.9.1
define(CHP2,"hoi4.exe"+01378C7C) //1.9.1 -&gt; ("Console not available in multiplayer or ironman mode.")
define(CHP3,"hoi4.exe"+01378CCF) //1.9.1 -&gt; ("Command available only for developers.")
define(CHP4,"hoi4.exe"+01378D2E) //1.9.1 -&gt; Only a little below the last one
define(CHP5,"hoi4.exe"+01378E3E) //1.9.1 -&gt; Below ("Console Error - command has missing action.")
define(CHP6,"hoi4.exe"+01379FDF) //1.9.1 -&gt; Around 100 (hex) below above, seperate function.

define(CHP1, "hoi4.exe"+00707AE1) // 1.10.4
define(CHP2, "hoi4.exe"+01679377) // 1.10.4
define(CHP3, "hoi4.exe"+01679423) // 1.10.4
define(CHP4, "hoi4.exe"+0167948F) // 1.10.4
define(CHP5, "hoi4.exe"+0167967C) // 1.10.4
define(CHP6, "hoi4.exe"+0167AB7F) // 1.10.4
}

//=========================================
 [ENABLE]
//=========================================

{$LUA}
memrec.Color = 0x00008000
{$ASM}

// Enable the console key
aobScanModule(CHP1,$process,   E8 ?? ?? ?? ?? 84 C0 0F 84 ?? ?? ?? ?? 48 8B CF E8 ?? ?? ?? ?? E9 ?? ?? ?? ?? 49 8B CF)

/*
Code snippet from 1.9.1
hoi4.exe+60D5DC - E8 BFB4D600           - call hoi4.exe+1378AA0
hoi4.exe+60D5E1 - 84 C0                 - test al,al
hoi4.exe+60D5E3 - 0F84 95010000         - je hoi4.exe+60D77E
hoi4.exe+60D5E9 - 48 8B CF              - mov rcx,rdi
hoi4.exe+60D5EC - E8 AFDAC200           - call hoi4.exe+123B0A0
*/

// Enable console in multiplayer and ironman
aobScanModule(CHP2,$process, 84 C0 75 1A 49 8B 8F 88 00 00 00  48 85 C9 )
/*
Code snippet from 1.9.1
hoi4.exe+1378C7C - E8 1FFEFFFF           - call hoi4.exe+1378AA0
hoi4.exe+1378C81 - 84 C0                 - test al,al
hoi4.exe+1378C83 - 75 11                 - jne hoi4.exe+1378C96                 &lt;== Replace jne with jmp
hoi4.exe+1378C85 - 45 8D 44 24 35        - lea r8d,[r12+35]
hoi4.exe+1378C8A - 48 8D 15 EF085A00     - lea rdx,[hoi4.exe+1919580] { ("Console not available in multiplayer or ironman mode.") }
*/

// Another check for console in multiplayer and ironman, same function as above, but seems to only affect windows store
aobScanModule(CHP2_2,$process, ff 50 10 84 c0 74 54 )

// Unlock developer mode
aobScanModule(CHP3,$process, FF 52 10 84 c0 74 1a 41 c6 87 )

/*
Code snippet from 1.9.1
hoi4.exe+1378CCF - FF 50 10              - call qword ptr [rax+10]
hoi4.exe+1378CD2 - 84 C0                 - test al,al
hoi4.exe+1378CD4 - 74 12                 - je hoi4.exe+1378CE8
hoi4.exe+1378CD6 - 41 B8 26000000        - mov r8d,00000026 { 38 }
hoi4.exe+1378CDC - 48 8D 15 D5085A00     - lea rdx,[hoi4.exe+19195B8] { ("Command available only for developers.") }
*/

// Disable 'bUsedCheats'
aobScanModule(CHP4,$process, 7C E2 4D 8B 45 78 48 8D 55 A0 48 8D 4D D8 )
/*
Code snippet from 1.9.1
hoi4.exe+1378D2E - 7C E3                 - jl hoi4.exe+1378D13
hoi4.exe+1378D30 - 4D 8B 47 78           - mov r8,[r15+78]
hoi4.exe+1378D34 - 48 8D 55 D7           - lea rdx,[rbp-29]
hoi4.exe+1378D38 - 48 8D 4D 1F           - lea rcx,[rbp+1F]
hoi4.exe+1378D3C - 41 FF 57 68           - call qword ptr [r15+68]
hoi4.exe+1378D40 - 0FB6 08               - movzx ecx,byte ptr [rax]
hoi4.exe+1378D43 - 88 4D E7              - mov [rbp-19],cl
hoi4.exe+1378D46 - 48 8D 50 08           - lea rdx,[rax+08]
hoi4.exe+1378D4A - 48 8D 4D EF           - lea rcx,[rbp-11]
*/

// Disable 'bUsedCheats' part 2
aobScanModule(CHP5,$process, 7C ?? 4D 8B CC 4C 8D 45 A0 48 8D 55 D8 )
/*
Code snippet from 1.9.1
hoi4.exe+1378E3E - 7C E3                 - jl hoi4.exe+1378E23
hoi4.exe+1378E40 - 4D 8B CF              - mov r9,r15
hoi4.exe+1378E43 - 4C 8D 45 D7           - lea r8,[rbp-29]
hoi4.exe+1378E47 - 48 8D 55 1F           - lea rdx,[rbp+1F]
hoi4.exe+1378E4B - 49 8B CF              - mov rcx,r15
hoi4.exe+1378E4E - E8 BD160000           - call hoi4.exe+137A510
hoi4.exe+1378E53 - 0FB6 08               - movzx ecx,byte ptr [rax]
hoi4.exe+1378E56 - 88 4D E7              - mov [rbp-19],cl
hoi4.exe+1378E59 - 48 8D 50 08           - lea rdx,[rax+08]
hoi4.exe+1378E5D - 48 8D 4D EF           - lea rcx,[rbp-11]
*/

// Disable crashing on console use
aobScanModule(CHP6,$process, CC 88 91 D0 00 00 00 C3 CC)
/*
Code snippet from 1.9.1
hoi4.exe+1379FDF - CC                    - int 3
hoi4.exe+1379FE0 - 88 91 D0000000        - mov [rcx+000000D0],dl
hoi4.exe+1379FE6 - C3                    - ret
hoi4.exe+1379FE7 - CC                    - int 3
*/

registerSymbol(CHP1)
registerSymbol(CHP2)
registerSymbol(CHP2_2)
registerSymbol(CHP3)
registerSymbol(CHP4)
registerSymbol(CHP5)
registerSymbol(CHP6)

//=========================================
// Script
//=========================================

CHP1+5:
// cmp eax,eax    // Replace je with jne and make sure it never jumps.
// jne
 db 39 C0 0F 85

CHP2+2:
// jmp
 db 90 90         // replace jne with nop, never jump

CHP2_2+5:
// jmp
 db EB         // replace je with jmp

CHP3+5:
// jmp
 db EB            // replace je with jmp, this jump always has to happen.

CHP4+D2:
 nop
 nop
 nop
 nop
 nop
 nop
 nop

CHP5+D5:
 nop
 nop
 nop
 nop
 nop
 nop
 nop

CHP6+1:
 nop
 nop
 nop
 nop
 nop
 nop

//=========================================
 [DISABLE]
//=========================================

{$LUA}
memrec.Color = 0x00c08000
{$ASM}

CHP1+5:
// test al,al
// je
 db 84 C0 0F 84

CHP2+2:
// jne
 db 75 1A

CHP2_2+5:
// jne
 db 74 54

CHP3+5:
// je
 db 74

CHP4+D2:
// movzx eax,byte ptr [rbp-19] &lt;- line not included in opcode below, just a reference point.
// mov [r14+000000D0], al
 db 41 88 8F D0 00 00 00

CHP5+D5:
// movzx eax,byte ptr [rbp-19] &lt;- line not included in opcode below, just a reference point.
// mov [r14+000000D0], al
  db 41 88 8F D0 00 00 00
  
CHP6+1:
// mov [rcx+000000D0], dl
 db 88 91 D0 00 00 00

unregisterSymbol(CHP1)
unregisterSymbol(CHP2)
unregisterSymbol(CHP3)
unregisterSymbol(CHP4)
unregisterSymbol(CHP5)
unregisterSymbol(CHP6)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>7354</ID>
              <Description>"http://www.hoi4wiki.com/Console_commands"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" Activated="1" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>7355</ID>
              <Description>"! -- List of console commands on the wiki -- !"</Description>
              <LastState Value="" Activated="1" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7356</ID>
          <Description>"[十] &lt;==铁人模式中启用修改的成就"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//=========================================
// Definitions
//=========================================
{
define(MAVC+5,"hoi4.exe"+00217D15)
define(MACD+C,"hoi4.exe"+000A0EDA)
define(MAGR+7,"hoi4.exe"+00283AEC)

1.10.4
define(MAVC+5, "hoi4.exe"+00502355)
define(MACD+C, "hoi4.exe"+0013B2CA) // Doesn't have any effect on the custom difficulty
define(MAGR+7, "hoi4.exe"+0059DF46)


}
//=========================================
[ENABLE]
//=========================================

{$LUA}
memrec.Color = 0x00008000
{$ASM}

// Allows achievements with NAC (Not Achievement Compatible) mods
aobScanModule(MAVC,$process,E8 ?? ?? ?? ?? 40 88 7B 6A 48 8B 5C 24 30)

// Allows achievements with custom difficulty. 1.10.4 - Seems to now be related to custom game rules
aobScanModule(MACD,$process,49 83 C0 08 49 3B D1 7C ?? 32 C0 C3 B0 01 C3 CC CC CC 48 89 5C 24 08)

// Allows achievements with custom game rules
aobScanModule(MAGR,$process,8B 4A 58 85 C9 74 ?? 83 E9 01 74 ?? 83 F9 01 75 ??)

registerSymbol(MAVC)
registerSymbol(MACD)
registerSymbol(MAGR)

//=========================================
// Actual script
//=========================================
MAVC+5:
 mov byte ptr [rbx+6A],01

MACD+C:
 mov al,00

MAGR+7:
 sub ecx,02

//=========================================
[DISABLE]
//=========================================
// This part restores all original code
//=========================================

{$LUA}
memrec.Color = 0x00c08000
{$ASM}

MAVC+5:
// mov [rbx+6A],dil
 db 40 88 7B 6A

MACD+C:
// mov al,01
 db B0 01

MAGR+7:
// sub ecx,01
 db 83 E9 01

unregisterSymbol(MAVC)
unregisterSymbol(MACD)
unregisterSymbol(MAGR)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>7357</ID>
              <Description>"-- ! -- Experimental feature -- ! --"</Description>
              <LastState Value="" Activated="1" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7358</ID>
          <Description>"[十] &lt;==坦克/空军/海军升级最大液位从5变为99"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//=========================================
// Definitions
//=========================================
{
define(UPG1+5,"hoi4.exe"+00A9BC02)
define(UPG2+4,"hoi4.exe"+004971EE)
define(UPXP+A,"hoi4.exe"+0049835A)

1.10.4
define(UPG1+5, "hoi4.exe"+0123CC6D)
define(UPG2+4, "hoi4.exe"+008DE8AA)
define(UPXP+A, "hoi4.exe"+008DF958)

}
//=========================================
[ENABLE]
//=========================================
// Check if the code at HP1,2,3 exists.
// If it doesn't, the game version is probably wrong and the script will not load
//=========================================

{$LUA}
memrec.Color = 0x00008000
{$ASM}

aobScanModule(UPG1,$process,E8 ?? ?? ?? ?? 90 0F B6 5B 78 48 8B 06)
aobScanModule(UPG2,$process,0F B6 4A 08 3A 48 78 73 ?? FE C1)
aobScanModule(UPXP,$process,B8 D3 4D 62 10 F7 EA 44 8B FA 41 C1 FF 06 41 8B C7 C1 E8 1F 44 03 F8 4D 85 F6)

registerSymbol(UPG1)
registerSymbol(UPG2)
registerSymbol(UPXP)

//=========================================
// Actual script
//=========================================00

//Changes the maximum levels for the UI to 99
UPG1+5:
 mov ebx,#99

//Prevent the game from locking upgrade levels
UPG2+4:
 nop
 nop
 nop
 nop
 nop

//Stops XP cost from increasing
UPXP+A:
 mov r15d,00000001
 nop

//=========================================
[DISABLE]
//=========================================
// This part restores all original code
//=========================================

{$LUA}
memrec.Color = 0x00c08000
{$ASM}

UPG1+5:
// nop
// movzx ebx,byte ptr [rbx+78]
 db 90 0F B6 5B 78

UPG2+4:
// cmp cl,[rax+78]
// jae "hoi4.exe"+4971D5
 db 3A 48 78 73 E2

UPXP+A:
// sar r14d,06
// mov eax,r14d
 db 41 C1 FF 06 41 8B C7

unregisterSymbol(UPG1)
unregisterSymbol(UPG2)
//unregisterSymbol(UPXP)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7359</ID>
          <Description>"[十] &lt;==最低燃油（需要Recifense的脚本）"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//=========================================
// Definitions
//=========================================
{
define(MOMF+5,"hoi4.exe"+005C8DB8)

define(MOMF+5, "hoi4.exe"+0099CA97) 
}
//=========================================
[ENABLE]
//=========================================

{$LUA}
memrec.Color = 0x00008000
{$ASM}

label(_BackMMF)
label(_ExitMMF)

aobScanModule(MOMF,$process,E8 ?? ?? ?? ?? 48 8B 47 18 48 8B 4F 10 48 85 C9 79 06)

registerSymbol(_MonMinFuel)
registerSymbol(MOMF)

//=========================================
alloc(_MonMinFuel,512,$process)
//=========================================
_MonMinFuel:
 mov eax,[pPlayer]
 cmp [rdi+00000090],eax
 jne _ExitMMF

 mov rcx,#2228224000
 cmp [rdi+10],rcx
 jns _ExitMMF

 mov [rdi+10],rcx

_ExitMMF:
 mov rcx,[rdi+10]
 mov rax,[rdi+18]
 jmp _BackMMF

MOMF+5:
 jmp _MonMinFuel
 nop
 nop
 nop
_BackMMF:

//=========================================
[DISABLE]
//=========================================
// This part restores all original code
//=========================================

{$LUA}
memrec.Color = 0x00c08000
{$ASM}

MOMF+5:
// mov rax,[rdi+18]
// mov rcx,[rdi+10]
 db 48 8B 47 18 48 8B 4F 10

unregisterSymbol(_MonMinFuel)
unregisterSymbol(MOMF)

dealloc(_MonMinFuel)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7360</ID>
          <Description>"[X] &lt;======== 点数 (需要作者Requires Recifense's 的脚本) ========"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>7361</ID>
              <Description>"这里就不汉化了，下面这些改了容易崩溃"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>008000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>7362</ID>
                  <Description>"[X] &lt;== Politics ==================="</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>800000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7363</ID>
                      <Description>"Country ID (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>18</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7364</ID>
                      <Description>"Country Name (&lt;16) (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>String</VariableType>
                      <Length>16</Length>
                      <Unicode>0</Unicode>
                      <CodePage>0</CodePage>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>b0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7365</ID>
                      <Description>"Country Name (&gt;=16) (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>String</VariableType>
                      <Length>64</Length>
                      <Unicode>0</Unicode>
                      <CodePage>0</CodePage>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>20</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7366</ID>
                      <Description>"Political Power (x1000)"</Description>
                      <DropDownList>680000:680
1000000:1000
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>C8</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7367</ID>
                      <Description>"Base Stability (x10)"</Description>
                      <LastState Value="1499094878" RealAddress="7FF6BD2708F8"/>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>8F8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7368</ID>
                      <Description>"Base War Support (x10)"</Description>
                      <LastState Value="1548192603" RealAddress="7FF6BD2708FC"/>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>8FC</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7369</ID>
                      <Description>"Fuel (x32768)"</Description>
                      <DropDownList>1638400000:50K
3276800000:100K
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>10</Offset>
                        <Offset>CA8</Offset>
                        <Offset>680</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7370</ID>
                      <Description>"Convoys (x1)"</Description>
                      <DropDownList>1000:1000
</DropDownList>
                      <LastState Value="0" RealAddress="7FF6BD270B30"/>
                      <Color>FF00FF</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>B30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7371</ID>
                      <Description>"Civilian Factories (x1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF00FF</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>194</Offset>
                        <Offset>7B0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7372</ID>
                      <Description>"Military Factories (x1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF00FF</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>178</Offset>
                        <Offset>7B0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7373</ID>
                      <Description>"Naval Dockyards (x1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF00FF</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>184</Offset>
                        <Offset>7B0</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>7374</ID>
                  <Description>"[X] &lt;== Factions ==================="</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>800000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7375</ID>
                      <Description>"Communist Support (x1000)"</Description>
                      <DropDownList>0:0
10000:10
20000:20
30000:30
40000:40
50000:50
60000:60
70000:70
80000:80
90000:90
100000:100
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>A0</Offset>
                        <Offset>8</Offset>
                        <Offset>20</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7376</ID>
                      <Description>"Democratic Support (x1000)"</Description>
                      <DropDownList>0:0
10000:10
20000:20
30000:30
40000:40
50000:50
60000:60
70000:70
80000:80
90000:90
100000:100
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>A0</Offset>
                        <Offset>0</Offset>
                        <Offset>20</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7377</ID>
                      <Description>"Fascist Support (x1000)"</Description>
                      <DropDownList>0:0
10000:10
20000:20
30000:30
40000:40
50000:50
60000:60
70000:70
80000:80
90000:90
100000:100
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>A0</Offset>
                        <Offset>10</Offset>
                        <Offset>20</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7378</ID>
                      <Description>"Non-Aligned Support (x1000)"</Description>
                      <DropDownList>0:0
10000:10
20000:20
30000:30
40000:40
50000:50
60000:60
70000:70
80000:80
90000:90
100000:100
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>A0</Offset>
                        <Offset>18</Offset>
                        <Offset>20</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>7379</ID>
                  <Description>"[X] &lt;== Military ==================="</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>800000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7380</ID>
                      <Description>"Command Power (x1000)"</Description>
                      <DropDownList>100000:100
200000:200
300000:300
400000:400
500000:500
600000:600
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>1BC</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7381</ID>
                      <Description>"Army Experience (x32768)"</Description>
                      <DropDownList>16384000:500
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>1D8</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7382</ID>
                      <Description>"Navy Experience (x32768)"</Description>
                      <DropDownList>16384000:500
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>1E8</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7383</ID>
                      <Description>"Air Experience (x32768)"</Description>
                      <DropDownList>16384000:500
</DropDownList>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayer</Address>
                      <Offsets>
                        <Offset>1F8</Offset>
                        <Offset>B0</Offset>
                        <Offset>7D8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7384</ID>
              <Description>"这里就不汉化了，下面这些改了容易崩溃============ Province Info =================="</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>008000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>7385</ID>
                  <Description>"[X] &lt;== Province  ================="</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>800000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7386</ID>
                      <Description>"Province ID (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>94</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7387</ID>
                      <Description>"Victory Points (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>38</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7388</ID>
                      <Description>"-- ! -- Don't change buildings from 0 to another number -- ! --"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>0080FF</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7389</ID>
                      <Description>"-- ! -- Build one of them first, or the game crashes -- ! --"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>0080FF</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7390</ID>
                      <Description>"Fort/Naval Slot 1 (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>0</Offset>
                        <Offset>118</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7391</ID>
                      <Description>"Fort/Naval Slot 2 (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>8</Offset>
                        <Offset>118</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7392</ID>
                      <Description>"Fort/Naval Slot 3 (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>10</Offset>
                        <Offset>118</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>7393</ID>
                  <Description>"[X] &lt;== State ===================="</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>800000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7394</ID>
                      <Description>"State ID (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>58</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7395</ID>
                      <Description>"State Name (&lt;16) (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>String</VariableType>
                      <Length>16</Length>
                      <Unicode>0</Unicode>
                      <CodePage>0</CodePage>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>30</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7396</ID>
                      <Description>"State Name (&gt;=16) (Do not change this)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>String</VariableType>
                      <Length>64</Length>
                      <Unicode>0</Unicode>
                      <CodePage>0</CodePage>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>20</Offset>
                        <Offset>30</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7397</ID>
                      <Description>"Extra building slots (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>658</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7398</ID>
                      <Description>"-- ! -- Don't change buildings from 0 to another number -- ! --"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>0080FF</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7399</ID>
                      <Description>"-- ! -- Build one of them first, or the game crashes -- ! --"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>0080FF</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7400</ID>
                      <Description>"Infrastructure (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>0</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7401</ID>
                      <Description>"Airbase (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>18</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7402</ID>
                      <Description>"Anti-Air (x1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>28</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7403</ID>
                      <Description>"Radar (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>40</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7404</ID>
                      <Description>"Military Factories (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>8</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7405</ID>
                      <Description>"Civilian Factories (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>10</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7406</ID>
                      <Description>"Naval Dockyards (x1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>20</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7407</ID>
                      <Description>"Synthetic Refinery (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>30</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7408</ID>
                      <Description>"Fuel Silo (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>38</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7409</ID>
                      <Description>"Rocket Site (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>48</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7410</ID>
                      <Description>"Nuclear Reactor (x1)"</Description>
                      <Color>FF00FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pRegion</Address>
                      <Offsets>
                        <Offset>3C</Offset>
                        <Offset>50</Offset>
                        <Offset>D0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7415</ID>
      <Description>"[X] 1.10.4 (8878) 脚本"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Hearts of Iron IV  (x64)
 Game Version  : 1.10.4 (8878) (Battle for the Bosporus)
 Game Sponsor  : TheSaviour + PF (DLCs)
 Process Name  : hoit4.exe
 Relevant Info : 64bits/RTS/New Engine
 Script Version: 8.9 (for x64)(AOB)
 CE Version    : 7.0
 Release date  : 07-Feb-2021
 Author        : Recifense
 History:
 07-Jun-2019: First Release for 64bits (v1.7.0)(s7.0)(CE68)
 14-Jun-2019: Fix for some crashes + improve time to load the table(s7.1)
 23-Jun-2019: Fix for some Weak Foe (Ships) (s7.2)
 23-Jun-2019: Release for v1.7.1-f8d7 (Beta) (s7.3)
 24-Jun-2019: Release for v1.7.1-87c8 (Beta) (s7.4)
 03-Sep-2019: Fix for GM (s7.5)(CE70)
 22-Sep-2019: A script patch due to CE70 issue (s7.6)
 13-Nov-2019: Release for v1.8.0-3241 (s7.7)
 14-Nov-2019: Release for v1.8.1-aa59 (s7.8)
 01-Dec-2019: Fix for identifying the player (s7.9)
 19-Dec-2019: Fix GM for ships (s7.10)
 07-Feb-2020: Release for v1.8.2-ce2f (s7.11)
 27-Feb-2020: Release for v1.9.0-ab9c + new features (s8.0)
 02-Mar-2020: Fix Manpower (s8.1)
 09-Mar-2020: Added 4 new features(s8.2)
 10-Apr-2020: Release for v1.9.1-6d23 (s8.3)
 06-May-2020: Release for v1.9.2-a73d (s8.4)
 04-Jun-2020: Release for v1.9.3-a7a4  (s8.5)
 16-Oct-2020: Release for v1.10.1-dd56 (s8.6) (Battle for the Bosporus)
 12-Nov-2020: Release for v1.10.2-f82d (s8.7)
 26-Nov-2020: Release for v1.10.3-aa89 (s8.8)(AOB)
 07-Feb-2021: Release for v1.10.4-8878 (s8.9)(AOB)
 Features:
 - Minimum Political Points  (700)
 - Minimum Natural Resources (250)
 - Construction in 1 day
 - Research in 1 day
 - Production in 1 day
 - Move to adjacent region in 1 hour
 - God Mode (Army/Fleet)
 - Minimum Manpower per State (7000)
 - Fill up player squadrons
 - Weak Foe (s4.0)
 - Minimum Base Stability   (80%)
 - Minimum Base War Support (50%)
 - Finish Focus in 1 day
 - Refitting in 1 day
 - Minimum Army/Navy/Air XP (268)
 - Minimum Command Points   (68)
 - Agency Construction in 1 day   (new) (s80)
 - Agency Upgrade in 1 day        (new) (s80)
 - Operative Recruitment in 1 day (new) (s80)
 - Cipher Decrypting in 1 Day     (new) (s80)
 - Deployment in 1 Day            (new) (s82)
 - Network Creation in 1 Days     (new) (s82)
 - Intel Operation in 1 Day       (new) (s82)
 - Each Operation Phase in 3 Days (new) (s82)
 - Some Pointers
===========================================
}

//{$STRICT}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 7.0) then
    ShowMessage('Warning. CE version should be 7.0 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (string.upper(process) ~= string.upper("hoi4.exe")) then
    ShowMessage('Warning. Expected Process = hoi4.exe')
  end
{$asm}

//=========================================
// Checking if CE mono features are ON
{$lua}
--  monoAA_USEMONO(process,false)
  if waitForPDB then --this way older CE versions are unaffected (By Dark Byte)
    waitForPDB()
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"hoi4.exe")
{
define(MOHP,hoi4.exe+00C73B27) //===X#=======#
define(MOCP,hoi4.exe+0091CACE) //====#=======X
define(MOPP,hoi4.exe+0091D2DE) //=====#======X
define(MPP1,hoi4.exe+0091D4E9) //============X
define(MPP2,hoi4.exe+00B6C604) //============X
define(MORP,hoi4.exe+00824659) //====#=======#
define(MOFP,hoi4.exe+00166C29) //====#=======X

define(MOSF,hoi4.exe+0063DAB8) //==#=#=======#
define(MOAM,hoi4.exe+007A9EB7) //============#
define(MAM1,hoi4.exe+007A9CDB) //=====#======X
define(MOPS,hoi4.exe+00B61700) //====#=======X
define(GDMD,hoi4.exe+007CC4DD) //====#=======X
define(GMDS,hoi4.exe+008F6C17) //====#=======X
define(GDS2,hoi4.exe+008ED662) //====#=======#

define(MOSR,hoi4.exe+00CB32D0) //============#
define(MOMR,hoi4.exe+0050E08B) //=====#==#====
define(MOMM,hoi4.exe+00807280) //=====#===#==# 2 1
}

// La Resistance DLC
//define(MOAC,hoi4.exe+006B5E62) //-----N====#
//define(MOAU,hoi4.exe+006B5F56) //-----N====#
//define(MOOR,hoi4.exe+006B5FEA) //-----N#===#
//define(MODP,hoi4.exe+00BE2260) //-----N====X

//define(MONP,hoi4.exe+00A1BF23) //-----N====#
//define(MOOP,hoi4.exe+00A06675) //-----N#===#
//define(MOPH,hoi4.exe+00B2682E) //-----N====#
// General
//define(MUDP,hoi4.exe+00BEF080) //-----N===##

//=========================================
// Constants used in the script (that can be changed)
define(ctCE70,(float)7.0)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MOHP,$process,41 8B 96 BC 01 00 00 48 8D 4C 24 30 E8 ?? ?? ?? ?? 48 8B D8 48 8B) //
AOBScanModule(MOCP,$process,8B 53 38 41 BE FF FF FF FF 03 D1 48 89 AC 24 80 00 00 00 89 53 38) //
AOBScanModule(MOPP,$process,44 8B 56 38 45 03 D1 44 89 56 38 45 85 C0 0F 84 ?? ?? ?? ?? 41 8D) //
AOBScanModule(MPP1,$process,8B 57 38 03 54 24 48 89 57 38 45 85 C0 0F 84 ?? ?? ?? ?? 8D 82 73) //
AOBScanModule(MPP2,$process,44 89 43 38 44 3B C1 7C ?? 44 2B C1 48 8D 8B 98 00 00 00 44 89 43) //
AOBScanModule(MORP,$process,01 8F 14 01 00 00 48 8B 7C 24 50 48 83 C4 30 5B C3 8B 0D ?? ?? ??) //
AOBScanModule(MOFP,$process,41 3B 90 E8 03 00 00 0F 8C ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 48 8D) //

AOBScanModule(MOSF,$process,48 8B 80 80 01 00 00 49 8D 5F 38 48 C1 E3 04 48 03 DF 8B B0 94 00) //
AOBScanModule(MOAM,$process,41 39 9E C0 01 00 00 0F 8C F8 01 00 00 41 39 BE A8 00 00 00 0F 8F) //
AOBScanModule(MAM1,$process,41 89 96 C0 01 00 00 EB ?? 41 8B 96 C0 01 00 00 8B C2 85 D2 79 ??) //
AOBScanModule(MOPS,$process,48 8B 0A 48 83 C2 08 03 41 68 49 3B D0 75 ?? C3 48 8B 51 30 33 C0) //
AOBScanModule(GDMD,$process,48 8B 81 A8 02 00 00 45 0F B6 F1 49 63 D8 48 8B F1 48 63 FA 48 85) //
AOBScanModule(GMDS,$process,89 91 28 03 00 00 E8 ?? ?? ?? ?? 8B 97 9C 02 00 00 8B 0D ?? ?? ??) //
AOBScanModule(GDS2,$process,89 8D 2C 03 00 00 8B 05 ?? ?? ?? ?? 3B C8 7D ?? 89 85 2C 03 00 00) //

AOBScanModule(MOSR,$process,48 8B 93 18 01 00 00 48 8B 8F 78 01 00 00 48 8B 14 F2 48 8B 0C F1) //
AOBScanModule(MOMR,$process,8b 43 28 48 8b 5c 24 30 4f 8d 04 40 49 c1 e0 04 4c 03 47 10 41 01)
AOBScanModule(MOMM,$process,48 8b 8e f8 03 00 00 48 8b 0c d9 e8 ?? ?? ?? ?? 48 8b c8 e8 ?? ?? ?? ?? 03 F8 48 FF C3 48 3B DD 7C ?? 48 8B 5C 24 30) //
// La Resistance DLC
AOBScanModule(MOAC,$process,39 87 B4 00 00 00 7D ?? 40 38 35 ?? ?? ?? ?? 0F 84 ?? ?? ?? ?? 48) //
AOBScanModule(MOAU,$process,39 87 B4 00 00 00 7D ?? 40 38 35 ?? ?? ?? ?? 74 ?? 48 8B 05 72 09) //
AOBScanModule(MOOR,$process,89 8F D8 00 00 00 3B C8 7C ?? 89 B7 D8 00 00 00 FF 87 D4 00 00 00) //
AOBScanModule(MODP,$process,8D 0C 18 89 4F 1C 8B 05 ?? ?? ?? ?? 3B C8 7D ?? 89 47 1C 3B C2 75) //

AOBScanModule(MONP,$process,48 8B 45 10 41 89 4C 06 20 48 FF C3 49 83 C6 38 48 3B DF 0F 85 ??) //
AOBScanModule(MOOP,$process,8B 43 34 39 43 30 7D ?? 49 8B 4D 10 E8 ?? ?? ?? ?? 48 8B C8 48 8D) //
AOBScanModule(MOPH,$process,83 B9 80 00 00 00 00 74 ?? 48 8B 05 ?? ?? ?? ?? 48 89 45 60 48 85) //

AOBScanModule(MUDP,$process,8B 47 5C 44 89 8F A0 00 00 00 39 47 58 0F 8D ?? ?? ?? ?? 80 3D ??) //

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_MonConstProg)
label(_BackMCP)
label(_MonProdProg)
label(_BackMPP)
label(_MonProdProg1)
label(_BackPP1)
label(_MonProdProg2)
label(_BackPP2)
label(_MonResearchProg)
label(_BackMRP)
label(_MonFocusProg)
label(_BackMFP)

label(_MonSelArmyFleet)
label(_BackMSF)
label(_MonArmyFleetMove)
label(_BackMAM)
label(_MonArmyFleetMove1)
label(_BackAM1)
label(_MonPlayerSquadrons)
label(_BackMPS)
label(_GodMode)
label(_BackGMD)
label(_GodModeS)
label(_BackGMS)
label(_GodModeS2)
label(_BackGS2)

label(_MonSelRegion)
label(_BackMSR)
label(_MonMinResource)
label(_BackMMR)
label(_MonMinMP)
label(_BackMMM)

label(_MonAgencyConst)
label(_BackMAC)
label(_MonAgencyUpg)
label(_BackMAU)
label(_MonOperRec)
label(_BackMOR)
label(_MonDecryptProg)
label(_BackMDP)

label(_MonUnitDeployProg)
label(_BackMUP)

label(_MonNetProg)
label(_BackMNP)
label(_MonOperProg)
label(_BackMOP)
label(_MonOperPhase)
label(_BackOPH)

label(iEnableMPP)
label(iEnableMMR)
label(iEnableMCP)
label(iEnableMRP)
label(iEnablePNP)
label(iEnableMAM)
label(iEnableGMD)
label(iEnableMMM)
label(iEnableMPS)
label(iEnableMWF)
label(iEnableMSY)
label(iEnableMWS)
label(iEnableMFP)
label(iEnableMQR)
label(iEnableMPX)
label(iEnableMPC)
label(iEnableMAC)
label(iEnableMAU)
label(iEnableMOR)
label(iEnableMDP)
label(iEnableMUP)
label(iEnableMNP)
label(iEnableMOP)
label(iEnableOPH)

label(pPlayer)
label(pPlayer1)
label(pPlayer2)
label(pArmyFleet)
label(pRegion)
label(iPlayerID)
label(aLast)

label(pRAX)
label(pRBX)
label(pRCX)
label(pRDX)
label(pRDI)
label(pRSI)
label(pRBP)

label(_MonHP00)
label(_MonHP01)
label(_MonHP02)
label(_MonHP03)
label(_MonHPN3)
label(_MonHPA3)
label(_MonHP04)
label(_ExitMHP)
label(_ExitMCP)
label(_ExitMPP)
label(_ExitPP1)
label(_ExitPP2)
label(_ExitMRP)
label(_ExitMFP)
label(_ExitMSF)
label(_ExitMAM)
label(_ExitAM1)
label(_ExitMPS)
label(_GodMD00)
label(_ExitGMD)
label(_GodMDS0)
label(_GodMDS1)
label(_ExitGMS)
label(_ExitGS2)
label(_ExitMSR)
label(_ExitMMR)
label(_MonMM00)
label(_ExitMMM)
label(_ExitMAC)
label(_ExitMAU)
label(_ExitMOR)

label(iCount)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPP)
registersymbol(iEnableMMR)
registersymbol(iEnableMCP)
registersymbol(iEnableMRP)
registersymbol(iEnablePNP)
registersymbol(iEnableMAM)
registersymbol(iEnableGMD)
registersymbol(iEnableMMM)
registersymbol(iEnableMPS)
registersymbol(iEnableMWF)
registersymbol(iEnableMSY)
registersymbol(iEnableMWS)
registersymbol(iEnableMFP)
registersymbol(iEnableMQR)
registersymbol(iEnableMPX)
registersymbol(iEnableMPC)
registersymbol(iEnableMAC)
registersymbol(iEnableMAU)
registersymbol(iEnableMOR)
registersymbol(iEnableMDP)
registersymbol(iEnableMUP)
registersymbol(iEnableMNP)
registersymbol(iEnableMOP)
registersymbol(iEnableOPH)
registersymbol(iPlayerID)
registersymbol(pPlayer)
registersymbol(pPlayer1)
registersymbol(pPlayer2)
registersymbol(pArmyFleet)
registersymbol(pRegion)
registersymbol(aLast)

registersymbol(pRAX)
registersymbol(pRBX)
registersymbol(pRCX)
registersymbol(pRDX)
registersymbol(pRDI)
registersymbol(pRSI)
registersymbol(pRBP)

registersymbol(MOHP)
registersymbol(MOCP)
registersymbol(MOPP)
registersymbol(MPP1)
registersymbol(MPP2)
registersymbol(MORP)
registersymbol(MOFP)

registersymbol(MOSF)
registersymbol(MOAM)
registersymbol(MAM1)
registersymbol(MOPS)
registersymbol(GDMD)
registersymbol(GMDS)
registersymbol(GDS2)

registersymbol(MOSR)
registersymbol(MOMR)
registersymbol(MOMM)

registersymbol(MOAC)
registersymbol(MOAU)
registersymbol(MOOR)
registersymbol(MODP)

registersymbol(MONP)
registersymbol(MOOP)
registersymbol(MOPH)

registersymbol(MUDP)

registersymbol(iCount)

//=========================================
MyCode:
//========================================= 1.10.4 *
// - Find out the Human Player
// - Minimum Political Points
// - Minimum Command Points
// - Minimum Army/Navy/Air XP
// RCX is safe
_MonHumanPlayer:
 mov dword ptr [aLast],'_MHP'

 xchg R15,R14

 cmp r15,[pPlayer]
 je _MonHPZZ

 inc dword ptr [iCount]

_MonHPZZ:
 mov [pPlayer],r15
 mov rcx,[r15+000007b0]
 mov [pPlayer1],rcx
 mov rcx,[r15+000007a8]
 mov [pPlayer2],rcx
 mov ecx,[r15+18]
 and ecx,00ffffff
 mov [iPlayerID],ecx

 cmp dword ptr [iEnableMPP],0      // Political Power
 je _MonHP00                       // Jump if feature is disabled

 mov ecx,#700000
 mov rdx,[r15+000007d8]
 cmp [rdx+000000c8],ecx
 jns _MonHP00

 mov [rdx+000000c8],ecx

_MonHP00:
 cmp dword ptr [iEnableMSY],0      // National Unity
 je _MonHP01                       // Jump if feature is disabled

 mov ecx,#800
 cmp [r15+000008f8],ecx
 jns _MonHP01

 mov [r15+000008f8],ecx

_MonHP01:
 cmp dword ptr [iEnableMWS],0      // War Support
 je _MonHP02                       // Jump if feature is disabled

 mov ecx,#500
 cmp [r15+000008fc],ecx
 jns _MonHP02

 mov [r15+000008fc],ecx

_MonHP02:
 cmp dword ptr [iEnableMPC],0      // Command Power
 je _MonHP03                       // Jump if feature is disabled

 mov ecx,#70000
 cmp [r15+000001bc],ecx
 jns _MonHP03

 mov [r15+000001bc],ecx

_MonHP03:
 cmp dword ptr [iEnableMPX],0      // XPs
 je _MonHP04                       // Jump if feature is disabled

 mov rcx,#8781824                  // 8781824 = 268 x 32K

 cmp [r15+000001d8],rcx
 jns _MonHPN3

 mov [r15+000001d8],rcx

_MonHPN3:
 cmp [r15+000001e8],rcx
 jns _MonHPA3

 mov [r15+000001e8],rcx

_MonHPA3:
 cmp [r15+000001f8],rcx
 jns _MonHP04

 mov [r15+000001f8],rcx

_MonHP04:
_ExitMHP:
 xchg R15,R14

 mov edx,[r14+000001BC]            // Original code
 jmp _BackMHP                      // Back to main code

//========================================= 1.10.4 X
// - Construction Progress (when day changes)
_MonConstProg:
 mov dword ptr [aLast],'_MCP'

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov rdx,[rbx+28]
 cmp rdx,[pPlayer1]
 jne _ExitMCP

 mov edx,[rbx+30]
 cmp [rbx+38],edx
 jns _ExitMCP

 mov [rbx+38],edx

_ExitMCP:
 mov edx,[rbx+38]                  // Original code (get prog)
 mov r14d,FFFFFFFF                 // Original code
 jmp _BackMCP                      // Back to main code

//========================================= 1.10.4 X
// - Production Progress (airplanes, weapons, etc) (when day changes)
_MonProdProg:
 mov dword ptr [aLast],'_MPP'

 cmp dword ptr [iEnablePNP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov r10,[rsi+28]
 cmp r10,[pPlayer1]
 jne _ExitMPP

 mov r10d,[rsi+30]
 add r10d,r10d

 cmp [rsi+38],r10d
 jns _ExitMPP

 mov [rsi+38],r10d

_ExitMPP:
 mov r10d,[rsi+38]                 // Original code (get prog)
 add r10d,r9d                      // Original code
 jmp _BackMPP                      // Back to main code

//========================================= 1.10.4 X
// - Production Progress (ship) (when day changes)
_MonProdProg1:
 mov dword ptr [aLast],'_PP1'
 push rbx

 cmp dword ptr [iEnablePNP],0
 je _ExitPP1                       // Jump if feature is disabled

 mov rbx,[rdi+28]
 cmp rbx,[pPlayer1]
 jne _ExitPP1

 mov ebx,[rdi+30]
 add ebx,ebx

 cmp [rdi+38],ebx
 jns _ExitPP1

 mov [rdi+38],ebx

_ExitPP1:
 pop rbx

 mov edx,[rdi+38]                  // Original code (get prog)
 add edx,[rsp+48]                  // Original code
 jmp _BackPP1                      // Back to main code

//========================================= 1.10.4 *
// - Refitting Progress (when day changes)
_MonProdProg2:
 mov dword ptr [aLast],'_PP2'

 push rax

 cmp dword ptr [iEnableMQR],0
 je _ExitPP2                       // Jump if feature is disabled

 mov rax,[rbx+28]
 cmp rax,[pPlayer1]
 jne _ExitPP2

 cmp r8d,ecx
 jns _ExitPP2

 mov r8d,ecx

_ExitPP2:
 pop rax

 mov [rbx+38],r8d                  // Original code(upd prog)
 cmp r8d,ecx                       // Original code
 jmp _BackPP2                      // Back to main code

//========================================= 1.10.4 *
// - Research Progress (when day changes)
_MonResearchProg:
 mov dword ptr [aLast],'_MRP'

 push rax

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov rax,[rdi+000000c8]
 cmp rax,[pPlayer2]
 jne _ExitMRP

 mov rax,[rdi+000000d0]
 test rax,rax
 jz _ExitMRP

 mov eax,[rax+00000330]
 add eax,eax
 imul eax,eax,64
 test eax,eax
 js _ExitMRP

 cmp [rdi+00000114],eax
 jns _ExitMRP

 mov [rdi+00000114],eax

_ExitMRP:
 pop rax

 add [rdi+00000114],ecx            // Original code (upd prog)
 jmp _BackMRP                      // Back to main code

//========================================= 1.10.4 X
// - Finish focus in a day (when day changes)
// RCX is safe and RDI = pFocus
_MonFocusProg:
 mov dword ptr [aLast],'_MFP'

 cmp dword ptr [iEnableMFP],0
 je _ExitMFP                       // Jump if feature is disabled

 mov rcx,[rdi+10]
 cmp rcx,[pPlayer]
 jne _ExitMFP

 mov ecx,[r8+000003E8]

 cmp [rdi+28],ecx
 jns _ExitMFP

 mov [rdi+28],ecx

 mov edx,ecx

_ExitMFP:
 cmp edx,[r8+000003E8]            // Original code (get val)
 jmp _BackMFP                      // Back to main code

//========================================= 1.10.4 #
// - When Army/Fleet is selected
_MonSelArmyFleet:
 mov [pArmyFleet],rax

_ExitMSF:
 mov rax,[rax+00000180]            // Original code (get pLocation)
 jmp _BackMSF                      // Back to main code

//========================================= 1.10.4 *
// - Movement in 1 hour (When Army/Fleet is moving)
_MonArmyFleetMove:
 mov dword ptr [aLast],'_MFM'

 push rax

 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[r14+00000168]
 jne _ExitMAM

 cmp [r14+000001c0],ebx
 jns _ExitMAM

 mov [r14+000001c0],ebx

_ExitMAM:
 pop rax

 cmp [r14+000001C0],ebx            // Original code (chk Move)
 jmp _BackMAM                      // Back to main code

//========================================= 1.10.4 X
// - Movement in 1 hour (When Army/Fleet is moving during battle)
_MonArmyFleetMove1:
 mov dword ptr [aLast],'_FM1'

 push rax

 cmp dword ptr [iEnableMAM],0
 je _ExitAM1                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[r14+00000168]
 jne _ExitAM1

 cmp edx,ebx
 jns _ExitAM1

 mov edx,ebx

_ExitAM1:
 pop rax

 mov [r14+000001C0],edx            // Original code (chk Move)
 jmp _BackAM1                      // Back to main code

//========================================= 1.10.4 *
// - All the time
_MonPlayerSquadrons:
 mov dword ptr [aLast],'_MPS'

 push rax
 push rbx
 push rdx

 mov rcx,[rdx]                     // Original code (get squadron)

 cmp dword ptr [iEnableMPS],0
 je _ExitMPS                       // Jump if feature is disabled

 mov eax,[rcx+0000055c]
 cmp eax,[iPlayerID]
 jne _ExitMPS

 mov eax,[rcx+70]
 cmp eax,[rcx+68]
 js _ExitMPS
 je _ExitMPS

 mov [rcx+68],eax
 imul eax,eax,#1000

 mov rbx,[rcx+00000198]
 test rbx,rbx
 jz _ExitMPS

 mov [rbx+10],eax

 mov rbx,[rcx+000001a8]
 test rbx,rbx
 jz _ExitMPS

 mov [rbx+08],eax

_ExitMPS:
 pop rdx
 pop rbx
 pop rax

 add rdx,08                        // Original code
 jmp _BackMPS                      // Back to main code

//========================================= 1.40.4 *
// - When in battle (army)
// RAX, RSI and RBX are safe to use
_GodMode:
 mov dword ptr [aLast],'_GMD'

 cmp dword ptr [iEnableGMD],0
 je _GodMD00                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[rcx+00000168]
 jne _GodMD00

 mov rbx,[rcx+78]
 test rbx,rbx
 jz _ExitGMD

 mov eax,[rbx+00000228]            // Organization
 mov [rcx+0000031c],eax

 mov eax,[ebx+0000022c]            // HP
 mov [rcx+00000318],eax

 xor eax,eax
 mov [rsp+00000088],eax
 mov [rcx+00000328],eax
 mov [rcx+0000032c],eax
 mov [rcx+00000330],eax
 xor r8,r8
 xor rdx,rdx
 jmp _ExitGMD
//==
_GodMD00:
 cmp dword ptr [iEnableMWF],0      // s4.0
 je _ExitGMD                       // Jump if feature is disabled

 test r15,r15
 js _ExitGMD

 mov rax,0000000010000000
 cmp r15,rax
 js _ExitGMD

 mov eax,[iPlayerID]
 cmp eax,[r15+00000168]            // Chk if player is the attacker
 jne _ExitGMD

 mov r8d,[rcx+0000031c]

 mov eax,[rcx+00000318]
 shr eax,1
 cmp edx,eax
 jns _ExitGMD

 mov edx,eax

_ExitGMD:
 mov rax,[rcx+000002A8]            // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 1.10.4 *
// - When in battle (ships)(strength)
// RAX is safe to use
_GodModeS:
 mov dword ptr [aLast],'_GMS'

 push rbp

 mov rbp,rcx

 cmp dword ptr [iEnableGMD],0
 je _GodMDS0                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]
 mov eax,[rax+00000168]
 cmp eax,[iPlayerID]
 jne _GodMDS0

 mov eax,[rbp+00000298]            // Organization
 mov [rbp+0000032c],eax

 mov edx,[rbp+0000029c]            // Strength
 mov [rbp+00000328],edx

 mov eax,[rbp+00000414]
 cmp [rbp+00000410],eax            // Manpower
 jns _ExitGMS

 mov [rbp+00000410],eax

 jmp _ExitGMS
//==
_GodMDS0:
 cmp dword ptr [iEnableMWF],0      // s4.0
 je _ExitGMS                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]            // get fleet
 test rax,rax
 jz _ExitGMS

 mov rax,[rax+00000200]
 test rax,rax
 jz _ExitGMS

 mov eax,[rax]
 cmp eax,[iPlayerID]
 jne _ExitGMS

 xor eax,eax
 mov [rbp+0000032c],eax

 mov eax,[rbp+00000328]
 shr eax,1
 cmp eax,edx
 jns _GodMDS1

 mov edx,eax

_GodMDS1:
_ExitGMS:
 mov rcx,rbp
 pop rbp

 mov [rcx+00000328],edx            // Original code (upd str)
 jmp _BackGMS                      // Back to main code

//========================================= 1.10.4 *
// - When in battle (ships)(organization)
// RAX is safe to use
_GodModeS2:
 mov dword ptr [aLast],'_GS2'

 cmp dword ptr [iEnableGMD],0
 je _ExitGS2                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]
 mov eax,[rax+00000168]
 cmp eax,[iPlayerID]
 jne _ExitGS2

 mov ecx,[rbp+00000298]            // Organization
 mov [rbp+0000032c],ecx

 mov eax,[rbp+0000029c]            // Strength
 mov [rbp+00000328],eax

 mov eax,[rbp+00000414]
 cmp [rbp+00000410],eax            // Manpower
 jns _ExitGS2

 mov [rbp+00000410],eax

_ExitGS2:
 mov [rbp+0000032C],ecx            // Original code (upd org)
 jmp _BackGS2                      // Back to main code

//========================================= 1.10.4 *
// - When a Province region is selected
_MonSelRegion:
 mov [pRegion],rbx

_ExitMSR:
 mov rdx,[rbx+00000118]            // Original code (pInfras)
 jmp _BackMSR                      // Back to main code

//========================================= 1.10.4 ok
// - Each hour
_MonMinResource:
 mov dword ptr [aLast],'_MMR'

 cmp dword ptr [iEnableMMR],0
 je _ExitMMR                       // Jump if feature is disabled

 mov rax,[rsp+00000418]
 test rax,rax
 jz _ExitMMR

 cmp rax,[rsp+00000458]
 jne _ExitMMR

// cmp rax,[qMinAddress]
// js _ExitMMR
// mov rax,[rax+48]

 cmp rax,[pPlayer]
 jne _ExitMMR

 mov eax,#250000
 cmp [rbx+28],eax
 jns _ExitMMR

 mov [rbx+28],eax

_ExitMMR:
 mov eax,[rbx+28]                  // Original code (get resource)
 mov rbx,[rsp+30]                  // Original code
 jmp _BackMMR                      // Back to main code

qMinAddress:
 dq 0000010000000000

//========================================= 1.10.4 #
// - All the time (Manpower)
// RAX can be used
_MonMinMP:
 mov dword ptr [aLast],'_MMM'

 mov rcx,[rsi+000003F8]            // Original code (get list)
 mov rcx,[rcx+rbx*8]               // Original code (get Province)

 cmp dword ptr [iEnableMMM],0
 je _ExitMMM                       // Jump if feature is disabled

 cmp rsi,[pPlayer]
 jne _ExitMMM

 mov eax,#7000
 cmp [rcx+00000648],eax
 jns _MonMM00

 mov [rcx+00000648],eax

_MonMM00:
_ExitMMM:
 jmp _BackMMM                      // Back to main code

//========================================= 1.10.4 *
// - When const prog is updated (for La Resistance DLC)
_MonAgencyConst:
 mov dword ptr [aLast],'_MAC'

 cmp r15,[pPlayer]
 jne _ExitMAC

 cmp dword ptr [iEnableMAC],0
 je _ExitMAC                       // Jump if feature is disabled

 cmp [rdi+000000B4],eax
 jns _ExitMAC

 mov [rdi+000000B4],eax

_ExitMAC:
 cmp [rdi+000000B4],eax            // Original code (chk prog)
 jmp _BackMAC                      // Back to main code

//========================================= 1.10.4 *
// - When upgrade prog is updated (for La Resistance DLC)
_MonAgencyUpg:
 mov dword ptr [aLast],'_MAU'

 cmp r15,[pPlayer]
 jne _ExitMAU

 cmp dword ptr [iEnableMAU],0
 je _ExitMAU                       // Jump if feature is disabled

 cmp [rdi+000000B4],eax
 jns _ExitMAU

 mov [rdi+000000B4],eax

_ExitMAU:
 cmp [rdi+000000B4],eax            // Original code (chk prog)
 jmp _BackMAU                      // Back to main code

//========================================= 1.10.4 *
// - When operative recruitment prog is updated (for La Resistance DLC)
_MonOperRec:
 mov dword ptr [aLast],'_MOR'

 cmp r15,[pPlayer]
 jne _ExitMOR

 cmp dword ptr [iEnableMOR],0
 je _ExitMOR                       // Jump if feature is disabled

 mov ecx,eax

_ExitMOR:
 mov [rdi+000000D8],ecx            // Original code (upd prog)
 jmp _BackMOR                      // Back to main code

//========================================= 1.10.4 *
// - When Decrypting prog is updated (for La Resistance DLC)
_MonDecryptProg:
 mov dword ptr [aLast],'_MDP'
 push rsi

 lea ecx,[rax+rbx]                 // Original code

 cmp dword ptr [iEnableMDP],0
 je _ExitMDP                       // Jump if feature is disabled

 test r15,r15
 jz _ExitMDP

 mov rsi,[r15+10]
 cmp rsi,[pPlayer]
 jne _ExitMDP

 cmp ecx,edx
 jns _ExitMDP

 mov ecx,edx

_ExitMDP:
 pop rsi

 mov [rdi+1C],ecx                  // Original code (upd prog)
 jmp _BackMDP                      // Back to main code

//========================================= 1.10.4 *
// - When Deployment progress is updated
_MonUnitDeployProg:
 mov dword ptr [aLast],'_MUP'

 push rbx
 push rcx
 push rdx
 push rdi
 push rsi
 push rbp

 mov rsi,rdi

 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                       // Jump if feature is disabled

 cmp r15,[pPlayer]
 jne _ExitMUP

 mov eax,#1000
 cmp [rsi+5C],eax                  // CMilitaryDeployment+5C
 je _MonUD0X

 mov rdi,[rsi+000000a8]            // CMilitaryDeploymentLine
 test rdi,rdi
 jz _ExitMUP

 mov rdi,[rdi+38]                  // CMilitaryDeploymentConveyor
 test rdi,rdi
 jz _ExitMUP

 mov rdi,[rdi+20]                  // CReferencedDivisionTemplate
 test rdi,rdi
 jz _ExitMUP

 movzx rcx,word ptr [rdi+0000009c] // 1
 test rcx,rcx
 jz _ExitMUP

 mov rbx,[rdi+00000090]
 test rbx,rbx
 jz _ExitMUP

 cmp ecx,[rsi+3c]                  // 1
 jne _ExitMUP

 mov rdi,[rsi+30]                  // pList
 imul rdx,rcx,00000018
 add rdx,rdi                       // pLEnd

_MonUD00:
 mov rbp,[rbx]
 mov eax,[rbx+08]

 cmp rbp,[rdi]
 je _MonUD01

 lea rdi,[rdi+18]
 cmp rdi,rdx
 js _MonUD00

 jmp _ExitMUP                  // Something wrong, exit.

_MonUD01:
 mov [rdi+10],eax

 mov rdi,[rsi+30]
 lea rbx,[rbx+10]
 loop _MonUD00

 mov eax,#1000
 mov [rsi+5C],eax

_MonUD0X:
 dec eax

 cmp [rsi+58],eax
 jns _ExitMUP

 mov [rsi+58],eax

_ExitMUP:
 pop rbp
 pop rsi
 pop rdi
 pop rdx
 pop rcx
 pop rbx

 mov eax,[rdi+5C]                  // Original code
 mov [rdi+000000A0],r9d            // Original code
 jmp _BackMUP                      // Back to main code

//========================================= 1.10.4 *
// - When updating Networking Creation Progress
_MonNetProg:
 mov dword ptr [aLast],'_MNP'

 cmp dword ptr [iEnableMNP],0
 je _ExitMNP                       // Jump if feature is disabled

 test ecx,ecx
 jz _ExitMNP

 test r15,r15
 jz _ExitMNP

 mov eax,[r15+00000088]
 cmp eax,[iPlayerID]
 jne _ExitMNP

 mov eax,#100000
 cmp ecx,eax
 jns _ExitMNP

 mov ecx,eax

_ExitMNP:
 mov rax,[rbp+10]                  // Original code
 mov [r14+rax+20],ecx              // Original code (upd prog)
 jmp _BackMNP                      // Back to main code

//========================================= 1.10.4 *
// - When operation Progress is updated
_MonOperProg:
 mov dword ptr [aLast],'_MOP'

 cmp dword ptr [iEnableMOP],0
 je _ExitMOP                       // Jump if feature is disabled

 mov rax,[rbx+48]
 cmp rax,[pPlayer]
 jne _ExitMOP

 mov eax,[rbx+34]
 cmp eax,#1000
 js _ExitMOP

 mov eax,#-1000
 add eax,[rbx+34]

 cmp [rbx+30],eax
 jns _ExitMOP

 mov [rbx+30],eax

_ExitMOP:
 mov eax,[rbx+34]                  // Original code (get prog)
 cmp [rbx+30],eax                  // Original code
 jmp _BackMOP                      // Back to main code

//========================================= 1.10.4 #
// - When operation phase is in Progress (When lookin at the Agency)
// RAX is safe
_MonOperPhase:
 mov dword ptr [aLast],'_OPH'

 cmp dword ptr [iEnableOPH],0
 je _ExitOPH                       // Jump if feature is disabled

 mov rax,[rcx+48]
 cmp rax,[pPlayer]
 jne _ExitOPH

 cmp byte ptr [rcx+3a],01
 je _ExitOPH

 cmp dword ptr [rcx+00000080],00
 je _ExitOPH

 cmp dword ptr [rcx+0000010c],00
 je _ExitOPH

 movzx rax,word ptr [rcx+0000010c]

 imul rax,rax,3

 cmp [rcx+00000080],eax
 js _ExitOPH

 mov [rcx+00000080],eax

_ExitOPH:
 cmp dword ptr [rcx+00000080],00   // Original code (chk #days)
 jmp _BackOPH                      // Back to main code

//=========================================
align 10,'='
//=========================================
 db '===============================&gt;'
 db 'CE7.0 Script by Recifense 210207'
//=========================================
// Variables
iEnableMPP:
 dd 0
iEnableMMR:
 dd 0
iEnableMCP:
 dd 0
iEnableMRP:
 dd 0
iEnablePNP:
 dd 0
iEnableMAM:
 dd 0
iEnableGMD:
 dd 0
iEnableMMM:
 dd 0
iEnableMPS:
 dd 0
iEnableMWF:
 dd 0
iEnableMSY:
 dd 0
iEnableMWS:
 dd 0
iEnableMFP:
 dd 0
iEnableMQR:
 dd 0
iEnableMPX:
 dd 0
iEnableMPC:
 dd 0
iEnableMAC:
 dd 0
iEnableMAU:
 dd 0
iEnableMOR:
 dd 0
iEnableMDP:
 dd 0
iEnableMUP:
 dd 0
iEnableMNP:
 dd 0
iEnableMOP:
 dd 0
iEnableOPH:
 dd 0
iPlayerID:
 dd #999999
pPlayer:
 dq MyCode
pPlayer1:
 dq MyCode
pPlayer2:
 dq MyCode
pArmyFleet:
 dq 0
pRegion:
 dq 0
pRAX:
 dq 0
pRBX:
 dq 0
pRCX:
 dq 0
pRDX:
 dq 0
pRDI:
 dq 0
pRSI:
 dq 0
pRBP:
 dq 0
iCount:
 dq 0
aLast:
 db 'CE70'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
 nop
_BackMHP:

MOCP:
 jmp _MonConstProg
 nop
 nop
 nop
 nop
_BackMCP:

MOPP:
 jmp _MonProdProg
 nop
 nop
_BackMPP:

MPP1:
 jmp _MonProdProg1
 nop
 nop
_BackPP1:

MPP2:
 jmp _MonProdProg2
 nop
 nop
_BackPP2:

MORP:
 jmp _MonResearchProg
 nop
_BackMRP:

MOFP:
 jmp _MonFocusProg
 nop
 nop
_BackMFP:

MOSF:
 jmp _MonSelArmyFleet
 nop
 nop
_BackMSF:

MOAM:
 jmp _MonArmyFleetMove
 nop
 nop
_BackMAM:

MAM1:
 jmp _MonArmyFleetMove1
 nop
 nop
_BackAM1:

MOPS:
 jmp _MonPlayerSquadrons
 nop
 nop
_BackMPS:

GDMD:
 jmp _GodMode
 nop
 nop
_BackGMD:

GMDS:
 jmp _GodModeS
 nop
_BackGMS:

GDS2:
 jmp _GodModeS2
 nop
_BackGS2:

MOSR:
 jmp _MonSelRegion
 nop
 nop
_BackMSR:

MOMR:
 jmp _MonMinResource
 nop
 nop
 nop
_BackMMR:

MOMM:
 jmp _MonMinMP
 jmp _MonMinMP
 nop
_BackMMM:

MOAC:
 jmp _MonAgencyConst
 nop
_BackMAC:

MOAU:
 jmp _MonAgencyUpg
 nop
_BackMAU:

MOOR:
 jmp _MonOperRec
 nop
_BackMOR:

MODP:
 jmp _MonDecryptProg
 nop
_BackMDP:

MUDP:
 jmp _MonUnitDeployProg
 jmp _MonUnitDeployProg
_BackMUP:

MONP:
 jmp _MonNetProg
 nop
 nop
 nop
 nop
_BackMNP:

MOOP:
 jmp _MonOperProg
 nop
_BackMOP:

MOPH:
 jmp _MonOperPhase
 nop
 nop
_BackOPH:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov edx,[r14+000001BC]
 db 41 8B 96 BC 01 00 00

MOCP:
// mov edx,[rbx+38]
// mov r14d,FFFFFFFF
 db 8B 53 38 41 BE FF FF FF FF

MOPP:
// mov r10d,[rsi+38]
// add r10d,r9d
 db 44 8B 56 38 45 03 D1

MPP1:
// mov edx,[rdi+38]
// add edx,[rsp+48]
 db 8B 57 38 03 54 24 48

MPP2:
// mov [rbx+38],r8d
// cmp r8d,ecx
 db 44 89 43 38 44 3B C1

MORP:
// add [rdi+00000114],ecx
 db 01 8F 14 01 00 00

MOFP:
// cmp edx,[r8+000003E8]
 db 41 3B 90 E8 03 00 00

MOSF:
// mov rax,[rax+00000180]
 db 48 8b 80 80 01 00 00

MOAM:
// cmp [r14+000001C0],ebx
 db 41 39 9E C0 01 00 00

MAM1:
// mov [r14+000001C0],edx
 db 41 89 96 C0 01 00 00

MOPS:
// mov rcx,[rdx]
// add rdx,08
 db 48 8B 0A 48 83 C2 08

GDMD:
// mov rax,[rcx+000002A8]
 db 48 8B 81 A8 02 00 00

GMDS:
// mov [rcx+00000328],edx
 db 89 91 28 03 00 00

GDS2:
// mov [rbp+0000032C],ecx
 db 89 8D 2C 03 00 00

MOSR:
// mov rdx,[rbx+00000118]
 db 48 8B 93 18 01 00 00

MOMR:
// mov eax,[rbx+28]
// mov rbx,[rsp+30]
 db 8b 43 28 48 8b 5c 24 30

MOMM:
// mov rcx,[rsi+000003F8]
// mov rcx,[rcx+rbx*8]
 db 48 8b 8e f8 03 00 00 48 8b 0c d9

MOAC:
// cmp [rdi+000000B4],eax
 db 39 87 B4 00 00 00

MOAU:
// cmp [rdi+000000B4],eax
 db 39 87 B4 00 00 00

MOOR:
// mov [rdi+000000D8],ecx
 db 89 8F D8 00 00 00

MODP:
// lea ecx,[rax+rbx]
// mov [rdi+1C],ecx
 db 8D 0C 18 89 4F 1C

MUDP:
// mov eax,[rsi+5C]
// mov [rdi+000000A0],r9d
 db 8B 47 5C 44 89 8F A0 00 00 00

MONP:
// mov rax,[rbp+10]
// mov [r14+rax+20],ecx
 db 48 8B 45 10 41 89 4C 06 20

MOOP:
// mov eax,[rbx+34]
// cmp [rbx+30],eax
 db 8B 43 34 39 43 30

MOPH:
// cmp dword ptr [rcx+00000080],00
 db 83 B9 80 00 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnablePNP)
unregistersymbol(iEnableMAM)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMPS)
unregistersymbol(iEnableMWF)
unregistersymbol(iEnableMSY)
unregistersymbol(iEnableMWS)
unregistersymbol(iEnableMFP)
unregistersymbol(iEnableMQR)
unregistersymbol(iEnableMPX)
unregistersymbol(iEnableMPC)
unregistersymbol(iEnableMAC)
unregistersymbol(iEnableMAU)
unregistersymbol(iEnableMOR)
unregistersymbol(iEnableMDP)
unregistersymbol(iEnableMUP)
unregistersymbol(iEnableMNP)
unregistersymbol(iEnableMOP)
unregistersymbol(iEnableOPH)
unregistersymbol(iPlayerID)
unregistersymbol(pPlayer)
unregistersymbol(pPlayer1)
unregistersymbol(pPlayer2)
unregistersymbol(pArmyFleet)
unregistersymbol(pRegion)
unregistersymbol(aLast)

unregistersymbol(pRAX)
unregistersymbol(pRBX)
unregistersymbol(pRCX)
unregistersymbol(pRDX)
unregistersymbol(pRDI)
unregistersymbol(pRSI)
unregistersymbol(pRBP)

unregistersymbol(MOHP)
unregistersymbol(MOCP)
unregistersymbol(MOPP)
unregistersymbol(MPP1)
unregistersymbol(MPP2)
unregistersymbol(MORP)
unregistersymbol(MOFP)

unregistersymbol(MOSF)
unregistersymbol(MOAM)
unregistersymbol(MAM1)
unregistersymbol(MOPS)
unregistersymbol(GDMD)
unregistersymbol(GMDS)
unregistersymbol(GDS2)

unregistersymbol(MOSR)
unregistersymbol(MOMR)
unregistersymbol(MOMM)

unregistersymbol(MOSR)
unregistersymbol(MOMR)
unregistersymbol(MOMM)

unregistersymbol(MOAC)
unregistersymbol(MOAU)
unregistersymbol(MOOR)
unregistersymbol(MODP)

unregistersymbol(MONP)
unregistersymbol(MOOP)
unregistersymbol(MOPH)

unregistersymbol(iCount)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7416</ID>
          <Description>"[X] &lt;== 无限政治点数"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7417</ID>
          <Description>"[X] &lt;== 无限基础稳定度"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMSY",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMSY",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7418</ID>
          <Description>"[X] &lt;== 无限战争支持度"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWS",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWS",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7419</ID>
          <Description>"[X] &lt;== 无限各州人力"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMM",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMM",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7420</ID>
          <Description>"[X] &lt;== 无限指挥点数"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPC",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPC",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7421</ID>
          <Description>"[X] &lt;== 无限三军经验"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPX",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPX",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7422</ID>
          <Description>"[X] &lt;== 无限自然资源"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMR",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7423</ID>
          <Description>"[X] &lt;== 一天内完成国策"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7424</ID>
          <Description>"[X] &lt;== 一天内完成研究"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7425</ID>
          <Description>"[X] &lt;== 一天内完成建设"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7426</ID>
          <Description>"[X] &lt;== 一天内完成生产"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnablePNP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnablePNP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7427</ID>
          <Description>"[X] &lt;== 一天内完成改装"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMQR",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMQR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7428</ID>
          <Description>"[X] &lt;== 一天内移动到相邻省份"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAM",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAM",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7429</ID>
          <Description>"[X] &lt;== 上帝模式"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7430</ID>
          <Description>"[X] &lt;== 弱敌（敌人一触即溃）"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWF",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWF",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7431</ID>
          <Description>"[X] &lt;== 填充玩家编队"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPS",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPS",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7432</ID>
          <Description>"[X] &lt;== 一天内建设间谍机构"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAC",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAC",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7433</ID>
          <Description>"[X] &lt;== 一天内升级间谍机构"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAU",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAU",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7434</ID>
          <Description>"[X] &lt;== 一天内可招募特工"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMOR",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMOR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7435</ID>
          <Description>"[X] &lt;== 一天内完成破译"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMDP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMDP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7436</ID>
          <Description>"[X] &lt;== 一天内部署单位"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7437</ID>
          <Description>"[X] &lt;== 一天内建设情报网"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMNP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMNP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7438</ID>
          <Description>"[X] &lt;== 一天内完成行动准备"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMOP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMOP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7439</ID>
          <Description>"[X] &lt;== 三天执行一个行动阶段"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableOPH",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableOHP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"[X] &lt;==1.10.5 (502a)脚本"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Hearts of Iron IV  (x64)
 Game Version  : 1.10.5 (502a) (Battle for the Bosporus)
 Game Sponsor  : TheSaviour + PF (DLCs)
 Process Name  : hoit4.exe
 Relevant Info : 64bits/RTS/New Engine
 Script Version: 8.10 (for x64)(AOB)
 CE Version    : 7.0
 Release date  : 15-Apr-2021
 Author        : Recifense
 History:
 07-Jun-2019: First Release for 64bits (v1.7.0)(s7.0)(CE68)
 14-Jun-2019: Fix for some crashes + improve time to load the table(s7.1)
 23-Jun-2019: Fix for some Weak Foe (Ships) (s7.2)
 23-Jun-2019: Release for v1.7.1-f8d7 (Beta) (s7.3)
 24-Jun-2019: Release for v1.7.1-87c8 (Beta) (s7.4)
 03-Sep-2019: Fix for GM (s7.5)(CE70)
 22-Sep-2019: A script patch due to CE70 issue (s7.6)
 13-Nov-2019: Release for v1.8.0-3241 (s7.7)
 14-Nov-2019: Release for v1.8.1-aa59 (s7.8)
 01-Dec-2019: Fix for identifying the player (s7.9)
 19-Dec-2019: Fix GM for ships (s7.10)
 07-Feb-2020: Release for v1.8.2-ce2f (s7.11)
 27-Feb-2020: Release for v1.9.0-ab9c + new features (s8.0)
 02-Mar-2020: Fix Manpower (s8.1)
 09-Mar-2020: Added 4 new features(s8.2)
 10-Apr-2020: Release for v1.9.1-6d23 (s8.3)
 06-May-2020: Release for v1.9.2-a73d (s8.4)
 04-Jun-2020: Release for v1.9.3-a7a4  (s8.5)
 16-Oct-2020: Release for v1.10.1-dd56 (s8.6) (Battle for the Bosporus)
 12-Nov-2020: Release for v1.10.2-f82d (s8.7)
 26-Nov-2020: Release for v1.10.3-aa89 (s8.8) (AOB)
 07-Feb-2021: Release for v1.10.4-8878 (s8.9) (AOB)
 15-Apr-2021: Release for v1.10.5-502a (s8.10)(AOB)
 Features:
 - Minimum Political Points  (700)
 - Minimum Natural Resources (250)
 - Construction in 1 day
 - Research in 1 day
 - Production in 1 day
 - Move to adjacent region in 1 hour
 - God Mode (Army/Fleet)
 - Minimum Manpower per State (7000)
 - Fill up player squadrons
 - Weak Foe (s4.0)
 - Minimum Base Stability   (80%)
 - Minimum Base War Support (50%)
 - Finish Focus in 1 day
 - Refitting in 1 day
 - Minimum Army/Navy/Air XP (268)
 - Minimum Command Points   (68)
 - Agency Construction in 1 day   (new) (s80)
 - Agency Upgrade in 1 day        (new) (s80)
 - Operative Recruitment in 1 day (new) (s80)
 - Cipher Decrypting in 1 Day     (new) (s80)
 - Deployment in 1 Day            (new) (s82)
 - Network Creation in 1 Days     (new) (s82)
 - Intel Operation in 1 Day       (new) (s82)
 - Each Operation Phase in 3 Days (new) (s82)
 - Some Pointers
===========================================
}

//{$STRICT}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 7.0) then
    ShowMessage('Warning. CE version should be 7.0 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (string.upper(process) ~= string.upper("hoi4.exe")) then
    ShowMessage('Warning. Expected Process = hoi4.exe')
  end
{$asm}

//=========================================
// Checking if CE mono features are ON
{$lua}
--  monoAA_USEMONO(process,false)
  if waitForPDB then --this way older CE versions are unaffected (By Dark Byte)
    waitForPDB()
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"hoi4.exe")
{
define(MOHP,hoi4.exe+00C73B27) //===X#=======#=
define(MOCP,hoi4.exe+0091CACE) //====#=======X=
define(MOPP,hoi4.exe+0091D2DE) //=====#======X=
define(MPP1,hoi4.exe+0091D4E9) //============X=
define(MPP2,hoi4.exe+00B6C604) //============X=
define(MORP,hoi4.exe+00824659) //====#=======#=
define(MOFP,hoi4.exe+00166C29) //====#=======X=

define(MOSF,hoi4.exe+0063DAB8) //==#=#=======#=
define(MOAM,hoi4.exe+007A9EB7) //============#=
define(MAM1,hoi4.exe+007A9CDB) //=====#======X=
define(MOPS,hoi4.exe+00B61700) //====#=======X=
define(GDMD,hoi4.exe+007CC4DD) //====#=======X=
define(GMDS,hoi4.exe+008F6C17) //====#=======X=
define(GDS2,hoi4.exe+008ED662) //====#=======#=

define(MOSR,hoi4.exe+00CB32D0) //============#=
define(MOMR,hoi4.exe+0050E08B) //=====#==#=====
define(MOMM,hoi4.exe+00807280) //=====#===#==#= 2 1
}

// La Resistance DLC
//define(MOAC,hoi4.exe+006B5E62) //-----N====#=
//define(MOAU,hoi4.exe+006B5F96) //-----N====##
//define(MOOR,hoi4.exe+006B5FEA) //-----N#===#=
//define(MODP,hoi4.exe+00BE2260) //-----N====X=

//define(MONP,hoi4.exe+00A1BF23) //-----N====#=
//define(MOOP,hoi4.exe+00A06675) //-----N#===#=
//define(MOPH,hoi4.exe+00B2682E) //-----N====#=
// General
//define(MUDP,hoi4.exe+00BEF080) //-----N===##=

//=========================================
// Constants used in the script (that can be changed)
define(ctCE70,(float)7.0)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MOHP,$process,41 8B 96 BC 01 00 00 48 8D 4C 24 30 E8 ?? ?? ?? ?? 48 8B D8 48 8B)
AOBScanModule(MOCP,$process,8B 53 38 41 BE FF FF FF FF 03 D1 48 89 AC 24 80 00 00 00 89 53 38)
AOBScanModule(MOPP,$process,44 8B 56 38 45 03 D1 44 89 56 38 45 85 C0 0F 84 ?? ?? ?? ?? 41 8D)
AOBScanModule(MPP1,$process,8B 57 38 03 54 24 48 89 57 38 45 85 C0 0F 84 ?? ?? ?? ?? 8D 82 73)
AOBScanModule(MPP2,$process,44 89 43 38 44 3B C1 7C ?? 44 2B C1 48 8D 8B 98 00 00 00 44 89 43)
AOBScanModule(MORP,$process,01 8F 14 01 00 00 48 8B 7C 24 50 48 83 C4 30 5B C3 8B 0D ?? ?? ??)
AOBScanModule(MOFP,$process,41 3B 90 E8 03 00 00 0F 8C ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 48 8D)

AOBScanModule(MOSF,$process,48 8B 80 80 01 00 00 49 8D 5F 38 48 C1 E3 04 48 03 DF 8B B0 94 00)
AOBScanModule(MOAM,$process,41 39 9E C0 01 00 00 0F 8C F8 01 00 00 41 39 BE A8 00 00 00 0F 8F)
AOBScanModule(MAM1,$process,41 89 96 C0 01 00 00 EB ?? 41 8B 96 C0 01 00 00 8B C2 85 D2 79 ??)
AOBScanModule(MOPS,$process,48 8B 0A 48 83 C2 08 03 41 68 49 3B D0 75 ?? C3 48 8B 51 30 33 C0)
AOBScanModule(GDMD,$process,48 8B 81 A8 02 00 00 45 0F B6 F1 49 63 D8 48 8B F1 48 63 FA 48 85)
AOBScanModule(GMDS,$process,89 91 28 03 00 00 E8 ?? ?? ?? ?? 8B 97 9C 02 00 00 8B 0D ?? ?? ??)
AOBScanModule(GDS2,$process,89 8D 2C 03 00 00 8B 05 ?? ?? ?? ?? 3B C8 7D ?? 89 85 2C 03 00 00)

AOBScanModule(MOSR,$process,48 8B 93 18 01 00 00 48 8B 8F 78 01 00 00 48 8B 14 F2 48 8B 0C F1)
AOBScanModule(MOMR,$process,8b 43 28 48 8b 5c 24 30 4f 8d 04 40 49 c1 e0 04 4c 03 47 10 41 01)
AOBScanModule(MOMM,$process,48 8b 8e f8 03 00 00 48 8b 0c d9 e8 ?? ?? ?? ?? 48 8b c8 e8 ?? ?? ?? ?? 03 F8 48 FF C3 48 3B DD 7C ?? 48 8B 5C 24 30)
// La Resistance DLC
AOBScanModule(MOAC,$process,39 87 B4 00 00 00 7D ?? 40 38 35 ?? ?? ?? ?? 0F 84 ?? ?? ?? ?? 48)
AOBScanModule(MOAU,$process,39 87 B4 00 00 00 7D ?? 40 38 35 ?? ?? ?? ?? 74 ?? 48 8B 05 ?? ??) //
AOBScanModule(MOOR,$process,89 8F D8 00 00 00 3B C8 7C ?? 89 B7 D8 00 00 00 FF 87 D4 00 00 00)
AOBScanModule(MODP,$process,8D 0C 18 89 4F 1C 8B 05 ?? ?? ?? ?? 3B C8 7D ?? 89 47 1C 3B C2 75)

AOBScanModule(MONP,$process,48 8B 45 10 41 89 4C 06 20 48 FF C3 49 83 C6 38 48 3B DF 0F 85 ??)
AOBScanModule(MOOP,$process,8B 43 34 39 43 30 7D ?? 49 8B 4D 10 E8 ?? ?? ?? ?? 48 8B C8 48 8D)
AOBScanModule(MOPH,$process,83 B9 80 00 00 00 00 74 ?? 48 8B 05 ?? ?? ?? ?? 48 89 45 60 48 85)

AOBScanModule(MUDP,$process,8B 47 5C 44 89 8F A0 00 00 00 39 47 58 0F 8D ?? ?? ?? ?? 80 3D ??)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_MonConstProg)
label(_BackMCP)
label(_MonProdProg)
label(_BackMPP)
label(_MonProdProg1)
label(_BackPP1)
label(_MonProdProg2)
label(_BackPP2)
label(_MonResearchProg)
label(_BackMRP)
label(_MonFocusProg)
label(_BackMFP)

label(_MonSelArmyFleet)
label(_BackMSF)
label(_MonArmyFleetMove)
label(_BackMAM)
label(_MonArmyFleetMove1)
label(_BackAM1)
label(_MonPlayerSquadrons)
label(_BackMPS)
label(_GodMode)
label(_BackGMD)
label(_GodModeS)
label(_BackGMS)
label(_GodModeS2)
label(_BackGS2)

label(_MonSelRegion)
label(_BackMSR)
label(_MonMinResource)
label(_BackMMR)
label(_MonMinMP)
label(_BackMMM)

label(_MonAgencyConst)
label(_BackMAC)
label(_MonAgencyUpg)
label(_BackMAU)
label(_MonOperRec)
label(_BackMOR)
label(_MonDecryptProg)
label(_BackMDP)

label(_MonUnitDeployProg)
label(_BackMUP)

label(_MonNetProg)
label(_BackMNP)
label(_MonOperProg)
label(_BackMOP)
label(_MonOperPhase)
label(_BackOPH)

label(iEnableMPP)
label(iEnableMMR)
label(iEnableMCP)
label(iEnableMRP)
label(iEnablePNP)
label(iEnableMAM)
label(iEnableGMD)
label(iEnableMMM)
label(iEnableMPS)
label(iEnableMWF)
label(iEnableMSY)
label(iEnableMWS)
label(iEnableMFP)
label(iEnableMQR)
label(iEnableMPX)
label(iEnableMPC)
label(iEnableMAC)
label(iEnableMAU)
label(iEnableMOR)
label(iEnableMDP)
label(iEnableMUP)
label(iEnableMNP)
label(iEnableMOP)
label(iEnableOPH)

label(pPlayer)
label(pPlayer1)
label(pPlayer2)
label(pArmyFleet)
label(pRegion)
label(iPlayerID)
label(aLast)

label(pRAX)
label(pRBX)
label(pRCX)
label(pRDX)
label(pRDI)
label(pRSI)
label(pRBP)

label(_MonHP00)
label(_MonHP01)
label(_MonHP02)
label(_MonHP03)
label(_MonHPN3)
label(_MonHPA3)
label(_MonHP04)
label(_ExitMHP)
label(_ExitMCP)
label(_ExitMPP)
label(_ExitPP1)
label(_ExitPP2)
label(_ExitMRP)
label(_ExitMFP)
label(_ExitMSF)
label(_ExitMAM)
label(_ExitAM1)
label(_ExitMPS)
label(_GodMD00)
label(_ExitGMD)
label(_GodMDS0)
label(_GodMDS1)
label(_ExitGMS)
label(_ExitGS2)
label(_ExitMSR)
label(_ExitMMR)
label(_MonMM00)
label(_ExitMMM)
label(_ExitMAC)
label(_ExitMAU)
label(_ExitMOR)

label(iCount)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPP)
registersymbol(iEnableMMR)
registersymbol(iEnableMCP)
registersymbol(iEnableMRP)
registersymbol(iEnablePNP)
registersymbol(iEnableMAM)
registersymbol(iEnableGMD)
registersymbol(iEnableMMM)
registersymbol(iEnableMPS)
registersymbol(iEnableMWF)
registersymbol(iEnableMSY)
registersymbol(iEnableMWS)
registersymbol(iEnableMFP)
registersymbol(iEnableMQR)
registersymbol(iEnableMPX)
registersymbol(iEnableMPC)
registersymbol(iEnableMAC)
registersymbol(iEnableMAU)
registersymbol(iEnableMOR)
registersymbol(iEnableMDP)
registersymbol(iEnableMUP)
registersymbol(iEnableMNP)
registersymbol(iEnableMOP)
registersymbol(iEnableOPH)
registersymbol(iPlayerID)
registersymbol(pPlayer)
registersymbol(pPlayer1)
registersymbol(pPlayer2)
registersymbol(pArmyFleet)
registersymbol(pRegion)
registersymbol(aLast)

registersymbol(pRAX)
registersymbol(pRBX)
registersymbol(pRCX)
registersymbol(pRDX)
registersymbol(pRDI)
registersymbol(pRSI)
registersymbol(pRBP)

registersymbol(MOHP)
registersymbol(MOCP)
registersymbol(MOPP)
registersymbol(MPP1)
registersymbol(MPP2)
registersymbol(MORP)
registersymbol(MOFP)

registersymbol(MOSF)
registersymbol(MOAM)
registersymbol(MAM1)
registersymbol(MOPS)
registersymbol(GDMD)
registersymbol(GMDS)
registersymbol(GDS2)

registersymbol(MOSR)
registersymbol(MOMR)
registersymbol(MOMM)

registersymbol(MOAC)
registersymbol(MOAU)
registersymbol(MOOR)
registersymbol(MODP)

registersymbol(MONP)
registersymbol(MOOP)
registersymbol(MOPH)

registersymbol(MUDP)

registersymbol(iCount)

//=========================================
MyCode:
//========================================= 1.10.4 *
// - Find out the Human Player
// - Minimum Political Points
// - Minimum Command Points
// - Minimum Army/Navy/Air XP
// RCX is safe
_MonHumanPlayer:
 mov dword ptr [aLast],'_MHP'

 xchg R15,R14

 cmp r15,[pPlayer]
 je _MonHPZZ

 inc dword ptr [iCount]

_MonHPZZ:
 mov [pPlayer],r15
 mov rcx,[r15+000007b0]
 mov [pPlayer1],rcx
 mov rcx,[r15+000007a8]
 mov [pPlayer2],rcx
 mov ecx,[r15+18]
 and ecx,00ffffff
 mov [iPlayerID],ecx

 cmp dword ptr [iEnableMPP],0      // Political Power
 je _MonHP00                       // Jump if feature is disabled

 mov ecx,#700000
 mov rdx,[r15+000007d8]
 cmp [rdx+000000c8],ecx
 jns _MonHP00

 mov [rdx+000000c8],ecx

_MonHP00:
 cmp dword ptr [iEnableMSY],0      // National Unity
 je _MonHP01                       // Jump if feature is disabled

 mov ecx,#800
 cmp [r15+000008f8],ecx
 jns _MonHP01

 mov [r15+000008f8],ecx

_MonHP01:
 cmp dword ptr [iEnableMWS],0      // War Support
 je _MonHP02                       // Jump if feature is disabled

 mov ecx,#500
 cmp [r15+000008fc],ecx
 jns _MonHP02

 mov [r15+000008fc],ecx

_MonHP02:
 cmp dword ptr [iEnableMPC],0      // Command Power
 je _MonHP03                       // Jump if feature is disabled

 mov ecx,#70000
 cmp [r15+000001bc],ecx
 jns _MonHP03

 mov [r15+000001bc],ecx

_MonHP03:
 cmp dword ptr [iEnableMPX],0      // XPs
 je _MonHP04                       // Jump if feature is disabled

 mov rcx,#8781824                  // 8781824 = 268 x 32K

 cmp [r15+000001d8],rcx
 jns _MonHPN3

 mov [r15+000001d8],rcx

_MonHPN3:
 cmp [r15+000001e8],rcx
 jns _MonHPA3

 mov [r15+000001e8],rcx

_MonHPA3:
 cmp [r15+000001f8],rcx
 jns _MonHP04

 mov [r15+000001f8],rcx

_MonHP04:
_ExitMHP:
 xchg R15,R14

 mov edx,[r14+000001BC]            // Original code
 jmp _BackMHP                      // Back to main code

//========================================= 1.10.4 X
// - Construction Progress (when day changes)
_MonConstProg:
 mov dword ptr [aLast],'_MCP'

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov rdx,[rbx+28]
 cmp rdx,[pPlayer1]
 jne _ExitMCP

 mov edx,[rbx+30]
 cmp [rbx+38],edx
 jns _ExitMCP

 mov [rbx+38],edx

_ExitMCP:
 mov edx,[rbx+38]                  // Original code (get prog)
 mov r14d,FFFFFFFF                 // Original code
 jmp _BackMCP                      // Back to main code

//========================================= 1.10.4 X
// - Production Progress (airplanes, weapons, etc) (when day changes)
_MonProdProg:
 mov dword ptr [aLast],'_MPP'

 cmp dword ptr [iEnablePNP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov r10,[rsi+28]
 cmp r10,[pPlayer1]
 jne _ExitMPP

 mov r10d,[rsi+30]
 add r10d,r10d

 cmp [rsi+38],r10d
 jns _ExitMPP

 mov [rsi+38],r10d

_ExitMPP:
 mov r10d,[rsi+38]                 // Original code (get prog)
 add r10d,r9d                      // Original code
 jmp _BackMPP                      // Back to main code

//========================================= 1.10.4 X
// - Production Progress (ship) (when day changes)
_MonProdProg1:
 mov dword ptr [aLast],'_PP1'
 push rbx

 cmp dword ptr [iEnablePNP],0
 je _ExitPP1                       // Jump if feature is disabled

 mov rbx,[rdi+28]
 cmp rbx,[pPlayer1]
 jne _ExitPP1

 mov ebx,[rdi+30]
 add ebx,ebx

 cmp [rdi+38],ebx
 jns _ExitPP1

 mov [rdi+38],ebx

_ExitPP1:
 pop rbx

 mov edx,[rdi+38]                  // Original code (get prog)
 add edx,[rsp+48]                  // Original code
 jmp _BackPP1                      // Back to main code

//========================================= 1.10.4 *
// - Refitting Progress (when day changes)
_MonProdProg2:
 mov dword ptr [aLast],'_PP2'

 push rax

 cmp dword ptr [iEnableMQR],0
 je _ExitPP2                       // Jump if feature is disabled

 mov rax,[rbx+28]
 cmp rax,[pPlayer1]
 jne _ExitPP2

 cmp r8d,ecx
 jns _ExitPP2

 mov r8d,ecx

_ExitPP2:
 pop rax

 mov [rbx+38],r8d                  // Original code(upd prog)
 cmp r8d,ecx                       // Original code
 jmp _BackPP2                      // Back to main code

//========================================= 1.10.4 *
// - Research Progress (when day changes)
_MonResearchProg:
 mov dword ptr [aLast],'_MRP'

 push rax

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov rax,[rdi+000000c8]
 cmp rax,[pPlayer2]
 jne _ExitMRP

 mov rax,[rdi+000000d0]
 test rax,rax
 jz _ExitMRP

 mov eax,[rax+00000330]
 add eax,eax
 imul eax,eax,64
 test eax,eax
 js _ExitMRP

 cmp [rdi+00000114],eax
 jns _ExitMRP

 mov [rdi+00000114],eax

_ExitMRP:
 pop rax

 add [rdi+00000114],ecx            // Original code (upd prog)
 jmp _BackMRP                      // Back to main code

//========================================= 1.10.4 X
// - Finish focus in a day (when day changes)
// RCX is safe and RDI = pFocus
_MonFocusProg:
 mov dword ptr [aLast],'_MFP'

 cmp dword ptr [iEnableMFP],0
 je _ExitMFP                       // Jump if feature is disabled

 mov rcx,[rdi+10]
 cmp rcx,[pPlayer]
 jne _ExitMFP

 mov ecx,[r8+000003E8]

 cmp [rdi+28],ecx
 jns _ExitMFP

 mov [rdi+28],ecx

 mov edx,ecx

_ExitMFP:
 cmp edx,[r8+000003E8]            // Original code (get val)
 jmp _BackMFP                      // Back to main code

//========================================= 1.10.4 #
// - When Army/Fleet is selected
_MonSelArmyFleet:
 mov [pArmyFleet],rax

_ExitMSF:
 mov rax,[rax+00000180]            // Original code (get pLocation)
 jmp _BackMSF                      // Back to main code

//========================================= 1.10.4 *
// - Movement in 1 hour (When Army/Fleet is moving)
_MonArmyFleetMove:
 mov dword ptr [aLast],'_MFM'

 push rax

 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[r14+00000168]
 jne _ExitMAM

 cmp [r14+000001c0],ebx
 jns _ExitMAM

 mov [r14+000001c0],ebx

_ExitMAM:
 pop rax

 cmp [r14+000001C0],ebx            // Original code (chk Move)
 jmp _BackMAM                      // Back to main code

//========================================= 1.10.4 X
// - Movement in 1 hour (When Army/Fleet is moving during battle)
_MonArmyFleetMove1:
 mov dword ptr [aLast],'_FM1'

 push rax

 cmp dword ptr [iEnableMAM],0
 je _ExitAM1                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[r14+00000168]
 jne _ExitAM1

 cmp edx,ebx
 jns _ExitAM1

 mov edx,ebx

_ExitAM1:
 pop rax

 mov [r14+000001C0],edx            // Original code (chk Move)
 jmp _BackAM1                      // Back to main code

//========================================= 1.10.4 *
// - All the time
_MonPlayerSquadrons:
 mov dword ptr [aLast],'_MPS'

 push rax
 push rbx
 push rdx

 mov rcx,[rdx]                     // Original code (get squadron)

 cmp dword ptr [iEnableMPS],0
 je _ExitMPS                       // Jump if feature is disabled

 mov eax,[rcx+0000055c]
 cmp eax,[iPlayerID]
 jne _ExitMPS

 mov eax,[rcx+70]
 cmp eax,[rcx+68]
 js _ExitMPS
 je _ExitMPS

 mov [rcx+68],eax
 imul eax,eax,#1000

 mov rbx,[rcx+00000198]
 test rbx,rbx
 jz _ExitMPS

 mov [rbx+10],eax

 mov rbx,[rcx+000001a8]
 test rbx,rbx
 jz _ExitMPS

 mov [rbx+08],eax

_ExitMPS:
 pop rdx
 pop rbx
 pop rax

 add rdx,08                        // Original code
 jmp _BackMPS                      // Back to main code

//========================================= 1.40.4 *
// - When in battle (army)
// RAX, RSI and RBX are safe to use
_GodMode:
 mov dword ptr [aLast],'_GMD'

 cmp dword ptr [iEnableGMD],0
 je _GodMD00                       // Jump if feature is disabled

 mov eax,[iPlayerID]
 cmp eax,[rcx+00000168]
 jne _GodMD00

 mov rbx,[rcx+78]
 test rbx,rbx
 jz _ExitGMD

 mov eax,[rbx+00000228]            // Organization
 mov [rcx+0000031c],eax

 mov eax,[ebx+0000022c]            // HP
 mov [rcx+00000318],eax

 xor eax,eax
 mov [rsp+00000088],eax
 mov [rcx+00000328],eax
 mov [rcx+0000032c],eax
 mov [rcx+00000330],eax
 xor r8,r8
 xor rdx,rdx
 jmp _ExitGMD
//==
_GodMD00:
 cmp dword ptr [iEnableMWF],0      // s4.0
 je _ExitGMD                       // Jump if feature is disabled

 test r15,r15
 js _ExitGMD

 mov rax,0000000010000000
 cmp r15,rax
 js _ExitGMD

 mov eax,[iPlayerID]
 cmp eax,[r15+00000168]            // Chk if player is the attacker
 jne _ExitGMD

 mov r8d,[rcx+0000031c]

 mov eax,[rcx+00000318]
 shr eax,1
 cmp edx,eax
 jns _ExitGMD

 mov edx,eax

_ExitGMD:
 mov rax,[rcx+000002A8]            // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 1.10.4 *
// - When in battle (ships)(strength)
// RAX is safe to use
_GodModeS:
 mov dword ptr [aLast],'_GMS'

 push rbp

 mov rbp,rcx

 cmp dword ptr [iEnableGMD],0
 je _GodMDS0                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]
 mov eax,[rax+00000168]
 cmp eax,[iPlayerID]
 jne _GodMDS0

 mov eax,[rbp+00000298]            // Organization
 mov [rbp+0000032c],eax

 mov edx,[rbp+0000029c]            // Strength
 mov [rbp+00000328],edx

 mov eax,[rbp+00000414]
 cmp [rbp+00000410],eax            // Manpower
 jns _ExitGMS

 mov [rbp+00000410],eax

 jmp _ExitGMS
//==
_GodMDS0:
 cmp dword ptr [iEnableMWF],0      // s4.0
 je _ExitGMS                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]            // get fleet
 test rax,rax
 jz _ExitGMS

 mov rax,[rax+00000200]
 test rax,rax
 jz _ExitGMS

 mov eax,[rax]
 cmp eax,[iPlayerID]
 jne _ExitGMS

 xor eax,eax
 mov [rbp+0000032c],eax

 mov eax,[rbp+00000328]
 shr eax,1
 cmp eax,edx
 jns _GodMDS1

 mov edx,eax

_GodMDS1:
_ExitGMS:
 mov rcx,rbp
 pop rbp

 mov [rcx+00000328],edx            // Original code (upd str)
 jmp _BackGMS                      // Back to main code

//========================================= 1.10.4 *
// - When in battle (ships)(organization)
// RAX is safe to use
_GodModeS2:
 mov dword ptr [aLast],'_GS2'

 cmp dword ptr [iEnableGMD],0
 je _ExitGS2                       // Jump if feature is disabled

 mov rax,[rbp+000003f0]
 mov eax,[rax+00000168]
 cmp eax,[iPlayerID]
 jne _ExitGS2

 mov ecx,[rbp+00000298]            // Organization
 mov [rbp+0000032c],ecx

 mov eax,[rbp+0000029c]            // Strength
 mov [rbp+00000328],eax

 mov eax,[rbp+00000414]
 cmp [rbp+00000410],eax            // Manpower
 jns _ExitGS2

 mov [rbp+00000410],eax

_ExitGS2:
 mov [rbp+0000032C],ecx            // Original code (upd org)
 jmp _BackGS2                      // Back to main code

//========================================= 1.10.4 *
// - When a Province region is selected
_MonSelRegion:
 mov [pRegion],rbx

_ExitMSR:
 mov rdx,[rbx+00000118]            // Original code (pInfras)
 jmp _BackMSR                      // Back to main code

//========================================= 1.10.4 ok
// - Each hour
_MonMinResource:
 mov dword ptr [aLast],'_MMR'

 cmp dword ptr [iEnableMMR],0
 je _ExitMMR                       // Jump if feature is disabled

 mov rax,[rsp+00000418]
 test rax,rax
 jz _ExitMMR

 cmp rax,[rsp+00000458]
 jne _ExitMMR

// cmp rax,[qMinAddress]
// js _ExitMMR
// mov rax,[rax+48]

 cmp rax,[pPlayer]
 jne _ExitMMR

 mov eax,#250000
 cmp [rbx+28],eax
 jns _ExitMMR

 mov [rbx+28],eax

_ExitMMR:
 mov eax,[rbx+28]                  // Original code (get resource)
 mov rbx,[rsp+30]                  // Original code
 jmp _BackMMR                      // Back to main code

qMinAddress:
 dq 0000010000000000

//========================================= 1.10.4 #
// - All the time (Manpower)
// RAX can be used
_MonMinMP:
 mov dword ptr [aLast],'_MMM'

 mov rcx,[rsi+000003F8]            // Original code (get list)
 mov rcx,[rcx+rbx*8]               // Original code (get Province)

 cmp dword ptr [iEnableMMM],0
 je _ExitMMM                       // Jump if feature is disabled

 cmp rsi,[pPlayer]
 jne _ExitMMM

 mov eax,#7000
 cmp [rcx+00000648],eax
 jns _MonMM00

 mov [rcx+00000648],eax

_MonMM00:
_ExitMMM:
 jmp _BackMMM                      // Back to main code

//========================================= 1.10.4 *
// - When const prog is updated (for La Resistance DLC)
_MonAgencyConst:
 mov dword ptr [aLast],'_MAC'

 cmp r15,[pPlayer]
 jne _ExitMAC

 cmp dword ptr [iEnableMAC],0
 je _ExitMAC                       // Jump if feature is disabled

 cmp [rdi+000000B4],eax
 jns _ExitMAC

 mov [rdi+000000B4],eax

_ExitMAC:
 cmp [rdi+000000B4],eax            // Original code (chk prog)
 jmp _BackMAC                      // Back to main code

//========================================= 1.10.5 #
// - When upgrade prog is updated (for La Resistance DLC)
_MonAgencyUpg:
 mov dword ptr [aLast],'_MAU'

 cmp r15,[pPlayer]
 jne _ExitMAU

 cmp dword ptr [iEnableMAU],0
 je _ExitMAU                       // Jump if feature is disabled

 cmp [rdi+000000B4],eax
 jns _ExitMAU

 mov [rdi+000000B4],eax

_ExitMAU:
 cmp [rdi+000000B4],eax            // Original code (chk prog)
 jmp _BackMAU                      // Back to main code

//========================================= 1.10.4 *
// - When operative recruitment prog is updated (for La Resistance DLC)
_MonOperRec:
 mov dword ptr [aLast],'_MOR'

 cmp r15,[pPlayer]
 jne _ExitMOR

 cmp dword ptr [iEnableMOR],0
 je _ExitMOR                       // Jump if feature is disabled

 mov ecx,eax

_ExitMOR:
 mov [rdi+000000D8],ecx            // Original code (upd prog)
 jmp _BackMOR                      // Back to main code

//========================================= 1.10.4 *
// - When Decrypting prog is updated (for La Resistance DLC)
_MonDecryptProg:
 mov dword ptr [aLast],'_MDP'
 push rsi

 lea ecx,[rax+rbx]                 // Original code

 cmp dword ptr [iEnableMDP],0
 je _ExitMDP                       // Jump if feature is disabled

 test r15,r15
 jz _ExitMDP

 mov rsi,[r15+10]
 cmp rsi,[pPlayer]
 jne _ExitMDP

 cmp ecx,edx
 jns _ExitMDP

 mov ecx,edx

_ExitMDP:
 pop rsi

 mov [rdi+1C],ecx                  // Original code (upd prog)
 jmp _BackMDP                      // Back to main code

//========================================= 1.10.4 *
// - When Deployment progress is updated
_MonUnitDeployProg:
 mov dword ptr [aLast],'_MUP'

 push rbx
 push rcx
 push rdx
 push rdi
 push rsi
 push rbp

 mov rsi,rdi

 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                       // Jump if feature is disabled

 cmp r15,[pPlayer]
 jne _ExitMUP

 mov eax,#1000
 cmp [rsi+5C],eax                  // CMilitaryDeployment+5C
 je _MonUD0X

 mov rdi,[rsi+000000a8]            // CMilitaryDeploymentLine
 test rdi,rdi
 jz _ExitMUP

 mov rdi,[rdi+38]                  // CMilitaryDeploymentConveyor
 test rdi,rdi
 jz _ExitMUP

 mov rdi,[rdi+20]                  // CReferencedDivisionTemplate
 test rdi,rdi
 jz _ExitMUP

 movzx rcx,word ptr [rdi+0000009c] // 1
 test rcx,rcx
 jz _ExitMUP

 mov rbx,[rdi+00000090]
 test rbx,rbx
 jz _ExitMUP

 cmp ecx,[rsi+3c]                  // 1
 jne _ExitMUP

 mov rdi,[rsi+30]                  // pList
 imul rdx,rcx,00000018
 add rdx,rdi                       // pLEnd

_MonUD00:
 mov rbp,[rbx]
 mov eax,[rbx+08]

 cmp rbp,[rdi]
 je _MonUD01

 lea rdi,[rdi+18]
 cmp rdi,rdx
 js _MonUD00

 jmp _ExitMUP                  // Something wrong, exit.

_MonUD01:
 mov [rdi+10],eax

 mov rdi,[rsi+30]
 lea rbx,[rbx+10]
 loop _MonUD00

 mov eax,#1000
 mov [rsi+5C],eax

_MonUD0X:
 dec eax

 cmp [rsi+58],eax
 jns _ExitMUP

 mov [rsi+58],eax

_ExitMUP:
 pop rbp
 pop rsi
 pop rdi
 pop rdx
 pop rcx
 pop rbx

 mov eax,[rdi+5C]                  // Original code
 mov [rdi+000000A0],r9d            // Original code
 jmp _BackMUP                      // Back to main code

//========================================= 1.10.4 *
// - When updating Networking Creation Progress
_MonNetProg:
 mov dword ptr [aLast],'_MNP'

 cmp dword ptr [iEnableMNP],0
 je _ExitMNP                       // Jump if feature is disabled

 test ecx,ecx
 jz _ExitMNP

 test r15,r15
 jz _ExitMNP

 mov eax,[r15+00000088]
 cmp eax,[iPlayerID]
 jne _ExitMNP

 mov eax,#100000
 cmp ecx,eax
 jns _ExitMNP

 mov ecx,eax

_ExitMNP:
 mov rax,[rbp+10]                  // Original code
 mov [r14+rax+20],ecx              // Original code (upd prog)
 jmp _BackMNP                      // Back to main code

//========================================= 1.10.4 *
// - When operation Progress is updated
_MonOperProg:
 mov dword ptr [aLast],'_MOP'

 cmp dword ptr [iEnableMOP],0
 je _ExitMOP                       // Jump if feature is disabled

 mov rax,[rbx+48]
 cmp rax,[pPlayer]
 jne _ExitMOP

 mov eax,[rbx+34]
 cmp eax,#1000
 js _ExitMOP

 mov eax,#-1000
 add eax,[rbx+34]

 cmp [rbx+30],eax
 jns _ExitMOP

 mov [rbx+30],eax

_ExitMOP:
 mov eax,[rbx+34]                  // Original code (get prog)
 cmp [rbx+30],eax                  // Original code
 jmp _BackMOP                      // Back to main code

//========================================= 1.10.4 #
// - When operation phase is in Progress (When lookin at the Agency)
// RAX is safe
_MonOperPhase:
 mov dword ptr [aLast],'_OPH'

 cmp dword ptr [iEnableOPH],0
 je _ExitOPH                       // Jump if feature is disabled

 mov rax,[rcx+48]
 cmp rax,[pPlayer]
 jne _ExitOPH

 cmp byte ptr [rcx+3a],01
 je _ExitOPH

 cmp dword ptr [rcx+00000080],00
 je _ExitOPH

 cmp dword ptr [rcx+0000010c],00
 je _ExitOPH

 movzx rax,word ptr [rcx+0000010c]

 imul rax,rax,3

 cmp [rcx+00000080],eax
 js _ExitOPH

 mov [rcx+00000080],eax

_ExitOPH:
 cmp dword ptr [rcx+00000080],00   // Original code (chk #days)
 jmp _BackOPH                      // Back to main code

//=========================================
align 10,'='
//=========================================
 db '===============================&gt;'
 db 'CE7.0 Script by Recifense 210415'
//=========================================
// Variables
iEnableMPP:
 dd 0
iEnableMMR:
 dd 0
iEnableMCP:
 dd 0
iEnableMRP:
 dd 0
iEnablePNP:
 dd 0
iEnableMAM:
 dd 0
iEnableGMD:
 dd 0
iEnableMMM:
 dd 0
iEnableMPS:
 dd 0
iEnableMWF:
 dd 0
iEnableMSY:
 dd 0
iEnableMWS:
 dd 0
iEnableMFP:
 dd 0
iEnableMQR:
 dd 0
iEnableMPX:
 dd 0
iEnableMPC:
 dd 0
iEnableMAC:
 dd 0
iEnableMAU:
 dd 0
iEnableMOR:
 dd 0
iEnableMDP:
 dd 0
iEnableMUP:
 dd 0
iEnableMNP:
 dd 0
iEnableMOP:
 dd 0
iEnableOPH:
 dd 0
iPlayerID:
 dd #999999
pPlayer:
 dq MyCode
pPlayer1:
 dq MyCode
pPlayer2:
 dq MyCode
pArmyFleet:
 dq 0
pRegion:
 dq 0
pRAX:
 dq 0
pRBX:
 dq 0
pRCX:
 dq 0
pRDX:
 dq 0
pRDI:
 dq 0
pRSI:
 dq 0
pRBP:
 dq 0
iCount:
 dq 0
aLast:
 db 'CE70'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
 nop
_BackMHP:

MOCP:
 jmp _MonConstProg
 nop
 nop
 nop
 nop
_BackMCP:

MOPP:
 jmp _MonProdProg
 nop
 nop
_BackMPP:

MPP1:
 jmp _MonProdProg1
 nop
 nop
_BackPP1:

MPP2:
 jmp _MonProdProg2
 nop
 nop
_BackPP2:

MORP:
 jmp _MonResearchProg
 nop
_BackMRP:

MOFP:
 jmp _MonFocusProg
 nop
 nop
_BackMFP:

MOSF:
 jmp _MonSelArmyFleet
 nop
 nop
_BackMSF:

MOAM:
 jmp _MonArmyFleetMove
 nop
 nop
_BackMAM:

MAM1:
 jmp _MonArmyFleetMove1
 nop
 nop
_BackAM1:

MOPS:
 jmp _MonPlayerSquadrons
 nop
 nop
_BackMPS:

GDMD:
 jmp _GodMode
 nop
 nop
_BackGMD:

GMDS:
 jmp _GodModeS
 nop
_BackGMS:

GDS2:
 jmp _GodModeS2
 nop
_BackGS2:

MOSR:
 jmp _MonSelRegion
 nop
 nop
_BackMSR:

MOMR:
 jmp _MonMinResource
 nop
 nop
 nop
_BackMMR:

MOMM:
 jmp _MonMinMP
 jmp _MonMinMP
 nop
_BackMMM:

MOAC:
 jmp _MonAgencyConst
 nop
_BackMAC:

MOAU:
 jmp _MonAgencyUpg
 nop
_BackMAU:

MOOR:
 jmp _MonOperRec
 nop
_BackMOR:

MODP:
 jmp _MonDecryptProg
 nop
_BackMDP:

MUDP:
 jmp _MonUnitDeployProg
 jmp _MonUnitDeployProg
_BackMUP:

MONP:
 jmp _MonNetProg
 nop
 nop
 nop
 nop
_BackMNP:

MOOP:
 jmp _MonOperProg
 nop
_BackMOP:

MOPH:
 jmp _MonOperPhase
 nop
 nop
_BackOPH:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov edx,[r14+000001BC]
 db 41 8B 96 BC 01 00 00

MOCP:
// mov edx,[rbx+38]
// mov r14d,FFFFFFFF
 db 8B 53 38 41 BE FF FF FF FF

MOPP:
// mov r10d,[rsi+38]
// add r10d,r9d
 db 44 8B 56 38 45 03 D1

MPP1:
// mov edx,[rdi+38]
// add edx,[rsp+48]
 db 8B 57 38 03 54 24 48

MPP2:
// mov [rbx+38],r8d
// cmp r8d,ecx
 db 44 89 43 38 44 3B C1

MORP:
// add [rdi+00000114],ecx
 db 01 8F 14 01 00 00

MOFP:
// cmp edx,[r8+000003E8]
 db 41 3B 90 E8 03 00 00

MOSF:
// mov rax,[rax+00000180]
 db 48 8b 80 80 01 00 00

MOAM:
// cmp [r14+000001C0],ebx
 db 41 39 9E C0 01 00 00

MAM1:
// mov [r14+000001C0],edx
 db 41 89 96 C0 01 00 00

MOPS:
// mov rcx,[rdx]
// add rdx,08
 db 48 8B 0A 48 83 C2 08

GDMD:
// mov rax,[rcx+000002A8]
 db 48 8B 81 A8 02 00 00

GMDS:
// mov [rcx+00000328],edx
 db 89 91 28 03 00 00

GDS2:
// mov [rbp+0000032C],ecx
 db 89 8D 2C 03 00 00

MOSR:
// mov rdx,[rbx+00000118]
 db 48 8B 93 18 01 00 00

MOMR:
// mov eax,[rbx+28]
// mov rbx,[rsp+30]
 db 8b 43 28 48 8b 5c 24 30

MOMM:
// mov rcx,[rsi+000003F8]
// mov rcx,[rcx+rbx*8]
 db 48 8b 8e f8 03 00 00 48 8b 0c d9

MOAC:
// cmp [rdi+000000B4],eax
 db 39 87 B4 00 00 00

MOAU:
// cmp [rdi+000000B4],eax
 db 39 87 B4 00 00 00

MOOR:
// mov [rdi+000000D8],ecx
 db 89 8F D8 00 00 00

MODP:
// lea ecx,[rax+rbx]
// mov [rdi+1C],ecx
 db 8D 0C 18 89 4F 1C

MUDP:
// mov eax,[rsi+5C]
// mov [rdi+000000A0],r9d
 db 8B 47 5C 44 89 8F A0 00 00 00

MONP:
// mov rax,[rbp+10]
// mov [r14+rax+20],ecx
 db 48 8B 45 10 41 89 4C 06 20

MOOP:
// mov eax,[rbx+34]
// cmp [rbx+30],eax
 db 8B 43 34 39 43 30

MOPH:
// cmp dword ptr [rcx+00000080],00
 db 83 B9 80 00 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnablePNP)
unregistersymbol(iEnableMAM)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMPS)
unregistersymbol(iEnableMWF)
unregistersymbol(iEnableMSY)
unregistersymbol(iEnableMWS)
unregistersymbol(iEnableMFP)
unregistersymbol(iEnableMQR)
unregistersymbol(iEnableMPX)
unregistersymbol(iEnableMPC)
unregistersymbol(iEnableMAC)
unregistersymbol(iEnableMAU)
unregistersymbol(iEnableMOR)
unregistersymbol(iEnableMDP)
unregistersymbol(iEnableMUP)
unregistersymbol(iEnableMNP)
unregistersymbol(iEnableMOP)
unregistersymbol(iEnableOPH)
unregistersymbol(iPlayerID)
unregistersymbol(pPlayer)
unregistersymbol(pPlayer1)
unregistersymbol(pPlayer2)
unregistersymbol(pArmyFleet)
unregistersymbol(pRegion)
unregistersymbol(aLast)

unregistersymbol(pRAX)
unregistersymbol(pRBX)
unregistersymbol(pRCX)
unregistersymbol(pRDX)
unregistersymbol(pRDI)
unregistersymbol(pRSI)
unregistersymbol(pRBP)

unregistersymbol(MOHP)
unregistersymbol(MOCP)
unregistersymbol(MOPP)
unregistersymbol(MPP1)
unregistersymbol(MPP2)
unregistersymbol(MORP)
unregistersymbol(MOFP)

unregistersymbol(MOSF)
unregistersymbol(MOAM)
unregistersymbol(MAM1)
unregistersymbol(MOPS)
unregistersymbol(GDMD)
unregistersymbol(GMDS)
unregistersymbol(GDS2)

unregistersymbol(MOSR)
unregistersymbol(MOMR)
unregistersymbol(MOMM)

unregistersymbol(MOSR)
unregistersymbol(MOMR)
unregistersymbol(MOMM)

unregistersymbol(MOAC)
unregistersymbol(MOAU)
unregistersymbol(MOOR)
unregistersymbol(MODP)

unregistersymbol(MONP)
unregistersymbol(MOOP)
unregistersymbol(MOPH)

unregistersymbol(iCount)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== 政治权利&lt;== "</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>246</ID>
          <Description>"[X] 稳定性"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMSY",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMSY",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>247</ID>
          <Description>"[X] &lt;== 战争支持度"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWS",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWS",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;==人力"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMM",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMM",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>262</ID>
          <Description>"[X] &lt;== 指挥权"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPC",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPC",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>263</ID>
          <Description>"[X] &lt;== 陆海空经验"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPX",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPX",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"[X] &lt;== 自然资源量"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMR",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>252</ID>
          <Description>"[X] &lt;== 1天内完成焦点"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;==研究1天"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== 1天施工"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== 1天生产"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnablePNP",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnablePNP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>258</ID>
          <Description>"[X] &lt;== 1天内改装"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMQR",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMQR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[x] &lt;==1小时内移动到相邻区域"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAM",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAM",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"[X] &lt;== 上帝模式"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>245</ID>
          <Description>"[X] &lt;== 弱小的敌人"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWF",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWF",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>235</ID>
          <Description>"[X] &lt;== 填满玩家中队"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPS",1)
memrec.Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPS",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>270</ID>
          <Description>"[X] &lt;== 1天内代理施工"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAC",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAC",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>272</ID>
          <Description>"[X] &lt;== 1天内代理升级"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAU",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAU",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>275</ID>
          <Description>"[X] &lt;== 1天内间谍招募"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMOR",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMOR",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>279</ID>
          <Description>"[X] &lt;== 密码解密1天"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMDP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMDP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>286</ID>
          <Description>"[X] &lt;== 一天内部署部队"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>287</ID>
          <Description>"[X] &lt;== 英特尔网络1天"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMNP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMNP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>289</ID>
          <Description>"[X] &lt;==1天内英特尔操作"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMOP",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMOP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>297</ID>
          <Description>"[X] &lt;==3天内每个操作阶段（选择代理机构）"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableOPH",1)
memrec.Color = 0x00004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableOHP",0)
memrec.Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iMinGold</Name>
      <Address>055F0C0E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonUTest</Name>
      <Address>009F03FB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>genderchange</Name>
      <Address>02A40000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20210207</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Hearts of Iron IV  (x64)
 Game Version  : 1.10.5 (502a) (Battle for the Bosporus)
 Game Sponsor  : TheSaviour + PF (DLCs)
 Process Name  : hoit4.exe
 Relevant Info : 64bits/RTS/New Engine
 Script Version: 8.10 (for x64)(AOB)
 CE Version    : 7.0
 Release date  : 15-Apr-2021
 Author        : Recifense
 History:
 07-Jun-2019: First Release for 64bits (v1.7.0)(s7.0)(CE68)
 14-Jun-2019: Fix for some crashes + improve time to load the table(s7.1)
 23-Jun-2019: Fix for some Weak Foe (Ships) (s7.2)
 23-Jun-2019: Release for v1.7.1-f8d7 (Beta) (s7.3)
 24-Jun-2019: Release for v1.7.1-87c8 (Beta) (s7.4)
 03-Sep-2019: Fix for GM (s7.5)(CE70)
 22-Sep-2019: A script patch due to CE70 issue (s7.6)
 13-Nov-2019: Release for v1.8.0-3241 (s7.7)
 14-Nov-2019: Release for v1.8.1-aa59 (s7.8)
 01-Dec-2019: Fix for identifying the player (s7.9)
 19-Dec-2019: Fix GM for ships (s7.10)
 07-Feb-2020: Release for v1.8.2-ce2f (s7.11)
 27-Feb-2020: Release for v1.9.0-ab9c + new features (s8.0)
 02-Mar-2020: Fix Manpower (s8.1)
 09-Mar-2020: Added 4 new features(s8.2)
 10-Apr-2020: Release for v1.9.1-6d23 (s8.3)
 06-May-2020: Release for v1.9.2-a73d (s8.4)
 04-Jun-2020: Release for v1.9.3-a7a4  (s8.5)
 16-Oct-2020: Release for v1.10.1-dd56 (s8.6) (Battle for the Bosporus)
 12-Nov-2020: Release for v1.10.2-f82d (s8.7)
 26-Nov-2020: Release for v1.10.3-aa89 (s8.8) (AOB)
 07-Feb-2021: Release for v1.10.4-8878 (s8.9) (AOB)
 15-Apr-2021: Release for v1.10.5-502a (s8.10)(AOB)
 Features:
 - Minimum Political Points  (700)   [1]
 - Minimum Natural Resources (250)   [2] (*)(***)
 - Construction in 1 day             [3]
 - Research in 1 day                 [4]
 - Production in 1 day               [5]
 - Move to adjacent region in 1 hour [6]
 - God Mode (Army/Fleet)             [7]
 - Minimum Manpower per State (7000) [8]
 - Fill up player squadrons          [9] (s3.0)
 - Weak Foe                          [A] (s4.0)
 - Minimum Base Stability   (80%)    [B] (new)
 - Minimum Base War Support (50%)    [C} (new)
 - Finish Focus in 1 day             [D] (new) (s5.2)
 - Refitting in 1 day                [E] (new) (s6.0)
 - Minimum Army/Navy/Air XP (268)    [F] (new) (s6.0)
 - Minimum Command Points   (68)     [G] (new) (s6.0)
 - Agency Construction in 1 day      [H] (brand-new) (s8.0)(La Resistance)
 - Agency Upgrade in 1 day           [I] (brand-new) (s8.0)(La Resistance)
 - Operative Recruitment in 1 day    [J] (brand-new) (s8.0)(La Resistance)
 - Cipher Decrypting in 1 Day        [K] (brand-new) (s8.0)(La Resistance)
 - Deployment in 1 Day               [L] (brand-new) (s8.2)
 - Network Creation in 1 Days        [M] (brand-new) (s8.2)(La Resistance)
 - Intel Operation in 1 Day          [N] (brand-new) (s8.2)(La Resistance)
 - Each Operation Phase in 3 Days    [O] (brand-new) (s8.2)(La Resistance)
 - Some Pointers                     [P]
===========================================
[1] It will not go under 700;
[2] It will not be lower than 250 (*)(***);
[3] That's it;
[4] That's it;
[5] That's it;
[6] Now every hour counts; :)
[7] HP and Organization (Army and Navy);
[8] It will not go under 7000;
[9] The planes will replaced very quickly;
[A] Battles involving the Human Player will end quickly (army/fleet);
[B] Human player minimum base stability will be 80%; 
[C] Human player minimum War Support will be 50%; 
[D] That's it; :)
[E] That's it; :)
[F] It will not go under 268;
[G] It will not go under 68;
[H] That's it; :)
[I] That's it; :)
[J] That's it; :)
[K] That's it; :)
[L] At least, one item of each requirement should be available;
[M] That's it; :)
[N] That's it; :)
[O] It depends on the available requirements and the Agency should be selected at least once after starting;
[P] Not used at the table;
(*) Let an hour pass so you can see the effect on the trade tab.
(**)You have to look at the contruction tab once a day, preferably at 23:00. 
(***) If you are using "Minimum Natural Resources (250)" and decides to load/play a different faction/Country, you HAVE to close the game and re-start CE and GAME. If you don't do that the previous faction natural resources will remain changed. The reason for that is that the game does not reflesh those numbers.  
===========================================
[USAGE]
1) Run CE70 or greater;
2) Run Game;
3) Load the game process "hoi4.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
HOTKEYS:
None pre-defined
===========================================
[IMPORTANT]
Save your game before using the cheats.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"CK2game.exe"+61650F</Address>
      <Comment>1
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
